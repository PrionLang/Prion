var searchIndex = JSON.parse('{\
"terbium":{"doc":"","t":[12,12,12,13,13,13,13,13,13,13,13,3,3,4,4,4,8,4,13,4,6,4,3,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,6,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,4,13,13,13,13,13,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,11,11,11,11,12,11,11,11,11,11,11,11,11,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"n":["0","0","1","Absolute","Add","And","Array","Arrow","Assign","Assign","AssignVar","AstBody","AstError","AstExpr","AstNode","AstOperator","AstParseInterface","AstToken","Attr","BcAddr","BcAddrRepr","BcInstruction","BcProgram","BcTransformer","BinOpAdd","BinOpBitAnd","BinOpBitOr","BinOpBitXor","BinOpDiv","BinOpMul","BinOpPow","BinOpSub","BinOpTrueDiv","BinaryExpr","BitAnd","BitLShift","BitNot","BitOr","BitRShift","BitXor","Bool","Bool","Call","CallFunc","Cast","Cast","Colon","Comma","Declare","DefaultInterpreter","Div","Dot","EndBracket","EnterScope","Eq","EqComparableFloat","ExitScope","Expr","Float","Float","Func","Ge","Gt","Halt","Ident","Identifier","If","Integer","Integer","Interpreter","Invalid","Jump","JumpIf","JumpIfElse","Keyword","Le","Literal","Load","LoadBool","LoadFloat","LoadFrame","LoadInt","LoadString","LoadVar","Lt","MakeFunc","Mod","Module","Mul","Ne","Not","Null","Offset","OpEq","OpGe","OpGt","OpLe","OpLogicalAnd","OpLogicalNot","OpLogicalOr","OpLt","OpNe","Operator","Or","Pop","Pow","Procedure","Question","Range","Require","Ret","RetNull","Return","Semicolon","Stack","StartBracket","Store","StoreConstVar","StoreMutVar","StoreVar","String","String","Sub","TerbiumObject","UnOpBitNot","UnOpNeg","UnOpPos","UnaryExpr","While","analyzer","append_to","append_to","append_to","append_to","append_to","append_to","append_to","append_to","append_to","append_to","append_to","append_to","append_to","append_to","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytecode","bytes","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","create_procedure","ctx","current_addr","custom","decr_ptr","default","default","default","default","default","dis","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","expected","expected_input_found","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_file","from_iter","from_string","get_bool_object","get_iter","get_iter","get_iter","get_iter","get_iter","get_iter","get_iter","get_iter","get_iter","get_object_repr","grammar","hash","hash","hash","hash","hint","incr_ptr","inner","interpret_body","interpret_body_no_return","interpret_body_scoped","interpret_body_scoped_no_return","interpret_expr","interpret_node","interpreter","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_truthy","kind","label","len","len","len","len","len","len","len","len","len","len","len","len","len","len","merge","message","ne","ne","ne","ne","ne","ne","ne","ne","new","new","new","new","next_addr","next_free","next_free_mut","no_const_mut","parse","parse","parse","parse","partial_cmp","pop","pop_cloned","pop_procedure","program","push","push","push","push_enter_scope","push_exit_scope","push_return","push_rich","push_spanned","reset_program","resolve","run_bytecode","size","sources","span","stack","stack_diff","string_lookup","supports_binary","supports_unary","to_instr_id","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unclosed_delimiter","unexpected_token","with_label","write","0","0","0","0","0","0","0","0","1","1","args","body","body","condition","condition","else_body","else_if_bodies","kwargs","lhs","operator","operator","rhs","value","value","0","0","0","0","body","const","mut","name","params","return_last","return_ty","targets","targets","ty","value","value","0","0","0","0","0","0","0","0","0","0","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","0","0","0","0"],"q":["terbiumterbium::AstExpr","","","","","","","","","","","","","","","","","","","","","","","","terbium::AstNode","","","","","","","","","","","","","","","","terbium::AstToken","","","","","","","terbium::BcAddr","","","","terbium::BcInstruction","","","","","","","","","","","","","","","","","","terbium::TerbiumObject","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents stack wrapper around an array.","","","","","","","","","The internal Terbium object model. These are created …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Decrements <code>ptr</code> by 1.","","","","Returns the default value of 0.0","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Reads and tokenizes the specified source file.","","Tokenizes source code and parses it using this parser.","","","","","","","","","","","","","","","","","","Increments <code>ptr</code> by 1.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Retrieves a reference to the next free slot.","Retrieves a mutable reference to the free slot.","","Errors","","","","","Pops the previous object in the stack and moves the …","Gets a cloned version of the previous object in the stack, …","","","","Pushes the given object to the stack.","","","","","","","","Resolves all procedures to their absolute address","Integers with a mantissa exceeding a width of 52 bits will …","","Create a <code>Cache</code> from a collection of ID/strings, where each …","","","Return a i8 representing the change in the count of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Write the error to the specified writer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,2,2,3,4,4,5,6,7,6,8,0,0,0,0,0,0,0,5,0,0,0,0,0,8,8,8,8,8,8,8,8,8,5,4,4,4,4,4,4,9,5,5,8,5,6,6,6,7,0,4,6,6,8,4,0,8,7,9,5,7,4,4,8,5,6,5,9,5,0,6,8,8,8,6,4,6,8,8,8,8,8,8,8,4,8,4,7,4,4,4,9,3,8,8,8,8,8,8,8,8,8,6,4,8,4,3,6,4,7,8,8,7,6,0,6,8,8,8,8,9,5,4,0,8,8,8,5,5,0,10,9,11,12,1,3,8,13,5,7,2,14,4,6,10,9,11,12,1,3,8,13,5,7,2,14,4,6,10,9,11,12,1,3,8,13,5,7,2,14,4,6,0,13,9,1,3,8,5,7,2,4,6,9,1,3,8,5,7,2,4,6,13,12,13,14,11,10,11,12,1,13,13,9,1,1,3,8,5,7,2,14,4,6,14,14,9,11,12,1,1,3,8,13,5,7,2,14,4,4,6,6,10,9,11,12,1,1,3,8,13,5,7,2,14,4,6,13,15,13,15,12,9,1,3,8,5,7,2,4,6,12,0,1,3,4,6,14,11,13,10,10,10,10,10,10,0,10,9,11,12,1,3,8,13,5,7,2,14,4,6,12,14,14,10,9,11,12,1,3,8,13,5,7,2,14,4,6,14,14,9,3,8,5,7,2,14,6,10,11,12,13,13,11,11,14,15,5,7,2,3,11,11,13,10,10,11,13,10,10,10,10,10,10,13,12,8,0,14,12,8,12,4,4,8,9,1,3,8,5,7,2,4,6,1,4,6,10,9,11,12,1,3,8,13,5,7,2,14,4,6,10,9,11,12,1,3,8,13,5,7,2,14,4,6,10,9,11,12,1,3,8,13,5,7,2,14,4,6,14,14,14,14,16,17,18,19,20,21,22,23,22,23,24,25,26,25,26,25,25,24,27,28,27,27,28,24,29,30,31,32,33,34,34,33,33,33,33,34,35,34,34,35,36,37,38,39,40,41,42,43,44,45,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,62,63,64,65,66],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vecnull,[[["program",3]],["vec",3,[["u8",0],["global",3]]]],[[["terbiumobject",4]],["terbiumobject",4]],[[["eqcomparablefloat",3]],["eqcomparablefloat",3]],[[["addr",4]],["addr",4]],[[["instruction",4]],["instruction",4]],[[["expr",4]],["expr",4]],[[["node",4]],["node",4]],[[["body",3]],["body",3]],[[["operator",4]],["operator",4]],[[["token",4]],["token",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["program",3]],["usize",0]],null,[[["program",3],["option",4,[["usize",0]]]],["addr",4]],[[["span",3],["display",8]],["error",3]],[[["stack",3]]],[[],["interpreter",3]],[[],["stack",3]],[[],["interpreter",3]],[[],["eqcomparablefloat",3]],[[],["program",3]],[[["program",3]],["result",4,[["error",3]]]],[[["terbiumobject",4],["terbiumobject",4]],["bool",0]],[[["eqcomparablefloat",3],["f64",0]],["bool",0]],[[["eqcomparablefloat",3],["eqcomparablefloat",3]],["bool",0]],[[["addr",4],["addr",4]],["bool",0]],[[["instruction",4],["instruction",4]],["bool",0]],[[["expr",4],["expr",4]],["bool",0]],[[["node",4],["node",4]],["bool",0]],[[["body",3],["body",3]],["bool",0]],[[["error",3],["error",3]],["bool",0]],[[["operator",4],["operator",4]],["bool",0]],[[["token",4],["token",4]],["bool",0]],null,[[["option",4]],["error",3]],[[["terbiumobject",4],["formatter",3]],["result",4,[["error",3]]]],[[["stack",3],["formatter",3]],["result",4,[["error",3]]]],[[["interpreter",3],["formatter",3]],["result",4,[["error",3]]]],[[["eqcomparablefloat",3],["formatter",3]],["result",4,[["error",3]]]],[[["eqcomparablefloat",3],["formatter",3]],["result",4,[["error",3]]]],[[["addr",4],["formatter",3]],["result",4,[["error",3]]]],[[["instruction",4],["formatter",3]],["result",4,[["error",3]]]],[[["program",3],["formatter",3]],["result",4,[["error",3]]]],[[["expr",4],["formatter",3]],["result",4,[["error",3]]]],[[["node",4],["formatter",3]],["result",4,[["error",3]]]],[[["body",3],["formatter",3]],["result",4,[["error",3]]]],[[["error",3],["formatter",3]],["result",4,[["error",3]]]],[[["operator",4],["formatter",3]],["result",4,[["error",3]]]],[[["operator",4],["formatter",3]],["result",4,[["error",3]]]],[[["token",4],["formatter",3]],["result",4,[["error",3]]]],[[["token",4],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[["f64",0]],["eqcomparablefloat",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["program",3]],[[],["result",4,[["vec",3,[["error",3],["global",3]]]]]],[[],["program",3]],[[["source",3],["string",3]],["result",4,[["vec",3,[["error",3],["global",3]]]]]],[[["interpreter",3],["terbiumobject",4]],["usize",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["interpreter",3],["terbiumobject",4]],["string",3]],null,[[["eqcomparablefloat",3],["",0]]],[[["addr",4],["",0]]],[[["operator",4],["",0]]],[[["token",4],["",0]]],null,[[["stack",3]]],[[["program",3]],["iterator",8]],[[["interpreter",3],["option",4,[["usize",0]]],["body",3]]],[[["interpreter",3],["option",4,[["usize",0]]],["vec",3,[["spanned",3,[["node",4]]],["global",3]]]]],[[["interpreter",3],["usize",0],["body",3]]],[[["interpreter",3],["usize",0],["vec",3,[["spanned",3,[["node",4]]],["global",3]]]]],[[["interpreter",3],["option",4,[["usize",0]]],["spanned",3,[["expr",4]]]]],[[["interpreter",3],["option",4,[["usize",0]]],["spanned",3,[["node",4]]]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["interpreter",3],["terbiumobject",4]],["bool",0]],null,null,[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["error",3],["error",3]],["error",3]],null,[[["terbiumobject",4],["terbiumobject",4]],["bool",0]],[[["addr",4],["addr",4]],["bool",0]],[[["instruction",4],["instruction",4]],["bool",0]],[[["expr",4],["expr",4]],["bool",0]],[[["node",4],["node",4]],["bool",0]],[[["body",3],["body",3]],["bool",0]],[[["error",3],["error",3]],["bool",0]],[[["token",4],["token",4]],["bool",0]],[[],["interpreter",3]],[[],["stack",3]],[[],["interpreter",3]],[[],["program",3]],[[["program",3],["option",4,[["usize",0]]]],["addr",4]],[[["stack",3]],["usize",0]],[[["stack",3]],["usize",0]],[[["span",3]],["error",3]],[[["vec",3,[["global",3]]]],["result",4,[["vec",3,[["error",3],["global",3]]]]]],[[["vec",3,[["global",3]]]],["result",4,[["expr",4],["vec",3,[["error",3],["global",3]]]]]],[[["vec",3,[["global",3]]]],["result",4,[["node",4],["vec",3,[["error",3],["global",3]]]]]],[[["vec",3,[["global",3]]]],["result",4,[["body",3],["vec",3,[["error",3],["global",3]]]]]],[[["addr",4],["addr",4]],["option",4,[["ordering",4]]]],[[["stack",3]],["usize",0]],[[["stack",3]],["usize",0]],[[["program",3]]],[[["interpreter",3]],["program",3]],[[["interpreter",3],["option",4,[["usize",0]]],["instruction",4]]],[[["stack",3],["usize",0]]],[[["program",3],["option",4,[["usize",0]]],["richinstruction",3]]],[[["interpreter",3],["usize",0]]],[[["interpreter",3],["usize",0]]],[[["interpreter",3],["usize",0],["bool",0]]],[[["interpreter",3],["option",4,[["usize",0]]],["richinstruction",3]]],[[["interpreter",3],["option",4,[["usize",0]]],["instruction",4],["span",3]]],[[["interpreter",3]]],[[["program",3]],["program",3]],[[["interpreter",3],["program",3]]],[[["instruction",4]],["usize",0]],[[],["cache",8]],null,[[["interpreter",3]],["stack",3]],[[["instruction",4]],["i8",0]],[[["interpreter",3],["usize",0]],["str",0]],[[["operator",4]],["bool",0]],[[["operator",4]],["bool",0]],[[["instruction",4]],["u8",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["option",4]],["error",3]],[[["span",3],["token",4]],["error",3]],[[["error",3]],["error",3]],[[["error",3],["write",8]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[3,"EqComparableFloat"],[3,"AstBody"],[4,"BcAddr"],[4,"AstOperator"],[4,"AstExpr"],[4,"AstToken"],[4,"AstNode"],[4,"BcInstruction"],[4,"TerbiumObject"],[3,"BcTransformer"],[3,"Stack"],[3,"Interpreter"],[3,"BcProgram"],[3,"AstError"],[8,"AstParseInterface"],[13,"Integer"],[13,"Float"],[13,"String"],[13,"Bool"],[13,"Ident"],[13,"Array"],[13,"Cast"],[13,"Attr"],[13,"Call"],[13,"If"],[13,"While"],[13,"BinaryExpr"],[13,"UnaryExpr"],[13,"Module"],[13,"Expr"],[13,"Return"],[13,"Require"],[13,"Func"],[13,"Declare"],[13,"Assign"],[13,"Invalid"],[13,"Operator"],[13,"Literal"],[13,"Keyword"],[13,"Identifier"],[13,"StartBracket"],[13,"EndBracket"],[13,"Absolute"],[13,"Procedure"],[13,"Offset"],[13,"LoadInt"],[13,"LoadFloat"],[13,"LoadString"],[13,"LoadBool"],[13,"Load"],[13,"LoadFrame"],[13,"Store"],[13,"StoreVar"],[13,"StoreMutVar"],[13,"StoreConstVar"],[13,"AssignVar"],[13,"LoadVar"],[13,"MakeFunc"],[13,"CallFunc"],[13,"Jump"],[13,"JumpIf"],[13,"JumpIfElse"],[13,"Integer"],[13,"Float"],[13,"String"],[13,"Bool"]]},\
"terbium_analyzer":{"doc":"","t":[12,12,13,4,3,4,3,13,13,13,13,13,13,13,3,13,4,13,13,13,13,13,13,13,3,3,13,13,13,13,13,13,13,4,13,13,4,13,13,4,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,12,11,5,5,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,5,5,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,5,5],"n":["0","0","Alert","AnalyzerKind","AnalyzerMessage","AnalyzerMessageKind","AnalyzerSet","And","Any","ApplyBinary","ApplyUnary","Array","Bool","Const","Context","Deferred","DeferredType","Float","Func","GlobalMutableVariables","IncompatibleTypes","Info","Int","Known","MockScope","MockScopeEntry","Mut","NonAscii","NonPascalCase","NonSnakeCase","None","Null","Primitive","PrimitiveType","ReassignedImmutableVariables","RedeclaredConstVariables","ScopeEntryModifier","String","Tuple","Type","TypeOf","UnbalancedIfStatements","UninferableTypes","Union","Unknown","UnnecessaryMutVariables","UnresolvedIdentifiers","UnsupportedOperators","UnusedVariables","all","append_to","append_to","append_to","append_to","append_to","append_to","append_to","append_to","append_to","append_to","append_to","ast","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cache","cache","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","close_var_match","code","contains","default","default","enter_scope","eq","eq","eq","eq","eq","eq","exit_scope","flatten","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_allowed_disabled","from_disabled","from_str","from_tokens","get_binary_op_outcome","get_binary_op_outcome","get_iter","get_iter","get_iter","get_iter","get_iter","get_iter","get_iter","get_iter","get_unary_op_outcome","get_unary_op_outcome","global_mutable_variable","hash","hash","hash","hash","incompatible_types","infer_type","into","into","into","into","into","into","into","into","into","into","into","is_compatible_with","is_const","is_error","is_let","is_mut","is_mutated","is_strictly_unknown","is_top_level","is_unknown","is_warning","kind","len","len","len","len","len","len","len","len","len","len","len","locals","locals_mut","lookup","lookup_var","lookup_var_mut","messages","modifier","mutated","name","ne","ne","ne","new","new","new","non_snake_case","none","reassigned_immutable_variable","redeclared_const_variable","report","resolve_deferred_type","resolve_type_expr","run_analysis","scopes","severity","span","store_var","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unbalanced_if_statement","unbalanced_if_statement_no_else","uninferable_type","unnecessary_mut_variable","unresolved_identifier","unsupported_binary_operator","unsupported_unary_operator","unused_variable","used","util","visit_expr","visit_node","warn_level","write","0","0","0","0","0","1","1","2","0","0","0","0","0","0","0","1","1","1","1","get_levenshtein_distance","to_snake_case"],"q":["terbium_analyzerterbium_analyzer::AnalyzerMessageKind","terbium_analyzer::DeferredType","","","","","","","terbium_analyzer::Type","","","","","","","","","","","terbium_analyzer::util",""],"d":["","","","","","","","","","","","","","","","","A struct that stores instructions on how to resolve a type.","","","[W005] Global mutable variables are highly discouraged","[E005] Received a type that was incompatible with what was …","","","A substitute for a known type, but when required as a …","","","","[W002] Identifier names should contain only ASCII …","[W001] Type identifier names, such as classes or traits …","[W000] Non-type identifier names should be snake_case","","","","","[E003] An immutable variable was reassigned to","[E002] A variable declared as <code>const</code> was redeclared later on","","","","","Reference this entry and retrieve its type after it is …","[W006] Value of an if statement has unbalanced types","[E006] The type could not be inferred","","","[W004] A variable or parameter was declared as mutable, …","[E001] An identifier (e.g. a variable) could not be found …","[E004] The operator is not supported for the given type","[W003] A variable or parameter was declared but never used","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","References the error index","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Analyze the given context.","","Returns a number 1 to 5 (inclusive) representing the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Analyzes the expression.","Analyzes the node.","","Write error to specified writer.","","","","","","","","","","","","","","","","","","","","",""],"i":[1,2,3,0,0,0,0,4,4,5,5,4,6,7,0,4,0,6,4,8,8,3,6,5,0,0,7,8,8,8,7,4,4,0,8,8,0,6,4,0,5,8,8,4,4,8,8,8,8,2,9,10,3,6,5,4,7,11,1,8,2,10,9,10,3,6,5,4,7,11,1,8,2,9,10,3,6,5,4,7,11,1,8,2,10,10,3,6,5,4,7,11,8,2,3,6,5,4,7,11,8,2,10,8,2,1,2,10,3,6,5,4,7,8,10,4,3,6,6,5,4,4,7,11,1,8,8,2,9,10,3,6,5,4,7,11,1,8,2,2,2,8,10,6,4,3,6,5,4,7,11,8,2,6,4,9,6,5,4,8,9,0,9,10,3,6,5,4,7,11,1,8,2,4,11,8,11,11,11,4,10,4,8,9,9,10,3,6,5,4,7,11,1,8,2,10,10,1,10,10,10,11,11,11,3,5,4,9,11,1,9,2,9,9,9,10,0,0,10,8,11,10,3,6,5,4,7,11,8,2,6,4,8,10,9,10,3,6,5,4,7,11,1,8,2,9,10,3,6,5,4,7,11,1,8,2,11,9,10,3,6,5,4,7,11,1,8,2,9,9,9,9,9,9,9,9,11,0,0,0,8,9,12,13,14,15,16,15,16,16,17,18,19,20,21,22,23,18,19,20,22,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["analyzerset",3]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["context",3]],["cache",8,[["source",3]]]],null,[[["analyzermessagekind",4]],["analyzermessagekind",4]],[[["primitivetype",4]],["primitivetype",4]],[[["deferredtype",4]],["deferredtype",4]],[[["type",4]],["type",4]],[[["scopeentrymodifier",4]],["scopeentrymodifier",4]],[[["mockscopeentry",3]],["mockscopeentry",3]],[[["analyzerkind",4]],["analyzerkind",4]],[[["analyzerset",3]],["analyzerset",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["context",3],["str",0]],["option",4]],[[["analyzerkind",4]],["u8",0]],[[["analyzerset",3],["analyzerkind",4]],["bool",0]],[[],["mockscope",3]],[[],["analyzerset",3]],[[["context",3]]],[[["analyzermessagekind",4],["analyzermessagekind",4]],["bool",0]],[[["primitivetype",4],["primitivetype",4]],["bool",0]],[[["deferredtype",4],["deferredtype",4]],["bool",0]],[[["type",4],["type",4]],["bool",0]],[[["scopeentrymodifier",4],["scopeentrymodifier",4]],["bool",0]],[[["analyzerkind",4],["analyzerkind",4]],["bool",0]],[[["context",3],["analyzerset",3],["vec",3]]],[[["type",4]],["type",4]],[[["analyzermessagekind",4],["formatter",3]],["result",6]],[[["primitivetype",4],["formatter",3]],["fmtresult",6]],[[["primitivetype",4],["formatter",3]],["result",6]],[[["deferredtype",4],["formatter",3]],["result",6]],[[["type",4],["formatter",3]],["result",6]],[[["type",4],["formatter",3]],["fmtresult",6]],[[["scopeentrymodifier",4],["formatter",3]],["result",6]],[[["mockscopeentry",3],["formatter",3]],["result",6]],[[["mockscope",3],["formatter",3]],["result",6]],[[["analyzerkind",4],["formatter",3]],["result",6]],[[["analyzerkind",4],["formatter",3]],["result",6]],[[["analyzerset",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["hashset",3],["hashset",3]],["analyzerset",3]],[[["hashset",3]],["analyzerset",3]],[[["str",0]],["result",4,[["analyzerkind",4]]]],[[["vec",3],["vec",3]],["context",3]],[[["primitivetype",4],["operator",4],["type",4]],["option",4,[["type",4]]]],[[["type",4],["operator",4],["type",4]],["option",4,[["type",4]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["primitivetype",4],["operator",4]],["option",4,[["type",4]]]],[[["type",4],["operator",4]],["option",4,[["type",4]]]],[[["span",3]],["analyzermessage",3]],[[["primitivetype",4],["",0]]],[[["deferredtype",4],["",0]]],[[["type",4],["",0]]],[[["analyzerkind",4],["",0]]],[[["span",3],["span",3],["string",3],["option",4,[["span",3]]],["string",3]],["analyzermessage",3]],[[["analyzerset",3],["context",3],["vec",3],["spanned",3]],["result",4,[["type",4],["str",0]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["type",4],["type",4]],["bool",0]],[[["mockscopeentry",3]],["bool",0]],[[["analyzerkind",4]],["bool",0]],[[["mockscopeentry",3]],["bool",0]],[[["mockscopeentry",3]],["bool",0]],[[["mockscopeentry",3]],["bool",0]],[[["type",4]],["bool",0]],[[["context",3]],["bool",0]],[[["type",4]],["bool",0]],[[["analyzerkind",4]],["bool",0]],null,[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["context",3]],["mockscope",3]],[[["context",3]],["mockscope",3]],[[["mockscope",3],["str",0]],["option",4,[["mockscopeentry",3]]]],[[["context",3],["string",3]],["option",4,[["mockscopeentry",3]]]],[[["context",3],["string",3]],["option",4,[["mockscopeentry",3]]]],null,null,null,null,[[["analyzermessagekind",4],["analyzermessagekind",4]],["bool",0]],[[["deferredtype",4],["deferredtype",4]],["bool",0]],[[["type",4],["type",4]],["bool",0]],[[["analyzermessagekind",4],["span",3]],["analyzermessage",3]],[[["string",3],["type",4],["scopeentrymodifier",4],["span",3]],["mockscopeentry",3]],[[],["mockscope",3]],[[["str",0],["string",3],["span",3]],["analyzermessage",3]],[[],["analyzerset",3]],[[["str",0],["span",3],["span",3],["bool",0]],["analyzermessage",3]],[[["str",0],["span",3],["span",3]],["analyzermessage",3]],null,[[["context",3],["deferredtype",4]],["type",4]],[[["context",3],["vec",3],["spanned",3,[["typeexpr",4]]]]],[[["analyzerset",3],["context",3]],["result",4,[["vec",3,[["analyzermessage",3]]],["str",0]]]],null,[[["analyzerkind",4]],["u8",0]],null,[[["context",3],["string",3],["mockscopeentry",3]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["span",3],["span",3],["string",3],["span",3],["string",3]],["analyzermessage",3]],[[["span",3],["span",3],["string",3]],["analyzermessage",3]],[[["str",0],["span",3]],["analyzermessage",3]],[[["str",0],["span",3]],["analyzermessage",3]],[[["str",0],["option",4],["span",3]],["analyzermessage",3]],[[["span",3],["string",3],["span",3],["string",3],["span",3],["operator",4],["span",3]],["analyzermessage",3]],[[["span",3],["string",3],["span",3],["operator",4],["span",3]],["analyzermessage",3]],[[["str",0],["span",3]],["analyzermessage",3]],null,null,[[["analyzerset",3],["context",3],["vec",3],["spanned",3,[["expr",4]]]],["result",4,[["type",4],["str",0]]]],[[["analyzerset",3],["context",3],["vec",3],["spanned",3,[["node",4]]]],["result",4,[["str",0]]]],[[["analyzerkind",4]],["option",4,[["u8",0]]]],[[["analyzermessage",3],["cache",8,[["source",3]]],["write",8]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["str",0],["str",0]],["usize",0]],[[["str",0]],["string",3]]],"p":[[3,"MockScope"],[3,"AnalyzerSet"],[4,"AnalyzerMessageKind"],[4,"Type"],[4,"DeferredType"],[4,"PrimitiveType"],[4,"ScopeEntryModifier"],[4,"AnalyzerKind"],[3,"AnalyzerMessage"],[3,"Context"],[3,"MockScopeEntry"],[13,"Alert"],[13,"TypeOf"],[13,"Known"],[13,"ApplyUnary"],[13,"ApplyBinary"],[13,"Primitive"],[13,"Union"],[13,"And"],[13,"Array"],[13,"Tuple"],[13,"Func"],[13,"Deferred"]]},\
"terbium_bytecode":{"doc":"Crate for Terbium byte-code/intermediate represenation.","t":[12,13,4,6,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,4,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,3,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"n":["0","Absolute","Addr","AddrRepr","AssignVar","BinOpAdd","BinOpBitAnd","BinOpBitOr","BinOpBitXor","BinOpDiv","BinOpMul","BinOpPow","BinOpSub","BinOpTrueDiv","CallFunc","EnterScope","EqComparableFloat","ExitScope","Halt","Instruction","Interpreter","Jump","JumpIf","JumpIfElse","Load","LoadBool","LoadFloat","LoadFrame","LoadInt","LoadString","LoadVar","MakeFunc","Offset","OpEq","OpGe","OpGt","OpLe","OpLogicalAnd","OpLogicalNot","OpLogicalOr","OpLt","OpNe","Pop","Procedure","Program","Ret","RetNull","RichInstruction","Store","StoreConstVar","StoreMutVar","StoreVar","UnOpBitNot","UnOpNeg","UnOpPos","append_to","append_to","append_to","append_to","append_to","append_to","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","create_procedure","current_addr","default","default","default","dis","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_bytes","from_iter","get_iter","get_iter","get_iter","get_iter","hash","hash","inner","instr","interpret_body","interpret_body_no_return","interpret_body_scoped","interpret_body_scoped_no_return","interpret_expr","interpret_node","into","into","into","into","into","into","into_instr","len","len","len","len","len","len","name","ne","ne","ne","new","new","next_addr","partial_cmp","pop_procedure","program","push","push","push_enter_scope","push_exit_scope","push_return","push_rich","push_spanned","reset_program","resolve","size","span","spanned","stack_diff","to_instr_id","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1"],"q":["terbium_bytecodeterbium_bytecode::Addr","","","","terbium_bytecode::Instruction","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the default value of 0.0","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Resolves all procedures to their absolute address","","","","Return a i8 representing the change in the count of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,2,0,0,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,0,0,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,2,0,3,3,0,3,3,3,3,3,3,3,4,1,2,3,5,6,4,1,2,3,5,6,4,1,2,3,5,6,6,1,2,3,5,1,2,3,5,6,6,4,1,6,6,1,1,2,3,5,1,1,2,3,5,6,4,1,1,2,3,5,5,6,6,6,1,2,3,5,1,2,6,5,4,4,4,4,4,4,4,1,2,3,5,6,5,4,1,2,3,5,6,5,2,3,5,4,6,6,2,6,4,4,6,4,4,4,4,4,4,6,3,5,5,3,3,1,2,3,5,1,4,1,2,3,5,6,4,1,2,3,5,6,4,1,2,3,5,6,7,8,9,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,26],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["program",3]],["vec",3,[["u8",0]]]],[[["eqcomparablefloat",3]],["eqcomparablefloat",3]],[[["addr",4]],["addr",4]],[[["instruction",4]],["instruction",4]],[[["richinstruction",3]],["richinstruction",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["program",3]],["addrrepr",6]],[[["program",3],["option",4,[["addrrepr",6]]]],["addr",4]],[[],["interpreter",3]],[[],["eqcomparablefloat",3]],[[],["program",3]],[[["program",3]],["result",6]],[[["eqcomparablefloat",3],["eqcomparablefloat",3]],["bool",0]],[[["eqcomparablefloat",3],["f64",0]],["bool",0]],[[["addr",4],["addr",4]],["bool",0]],[[["instruction",4],["instruction",4]],["bool",0]],[[["richinstruction",3],["richinstruction",3]],["bool",0]],[[["eqcomparablefloat",3],["formatter",3]],["fmtresult",6]],[[["eqcomparablefloat",3],["formatter",3]],["result",6]],[[["addr",4],["formatter",3]],["result",6]],[[["instruction",4],["formatter",3]],["result",6]],[[["richinstruction",3],["formatter",3]],["result",6]],[[["program",3],["formatter",3]],["result",6]],[[]],[[]],[[["f64",0]],["eqcomparablefloat",3]],[[]],[[]],[[]],[[["instruction",4]],["richinstruction",3]],[[]],[[],["program",3]],[[["intoiterator",8]],["program",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["eqcomparablefloat",3],["",0]]],[[["addr",4],["",0]]],[[["program",3]],["iterator",8]],[[["richinstruction",3]],["instruction",4]],[[["interpreter",3],["option",4,[["addrrepr",6]]],["body",3]]],[[["interpreter",3],["option",4,[["addrrepr",6]]],["vec",3,[["spanned",3,[["node",4]]]]]]],[[["interpreter",3],["addrrepr",6],["body",3]]],[[["interpreter",3],["addrrepr",6],["vec",3,[["spanned",3,[["node",4]]]]]]],[[["interpreter",3],["option",4,[["addrrepr",6]]],["spanned",3,[["expr",4]]]]],[[["interpreter",3],["option",4,[["addrrepr",6]]],["spanned",3,[["node",4]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["richinstruction",3]],["instruction",4]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["richinstruction",3]],["option",4]],[[["addr",4],["addr",4]],["bool",0]],[[["instruction",4],["instruction",4]],["bool",0]],[[["richinstruction",3],["richinstruction",3]],["bool",0]],[[],["interpreter",3]],[[],["program",3]],[[["program",3],["option",4,[["addrrepr",6]]]],["addr",4]],[[["addr",4],["addr",4]],["option",4,[["ordering",4]]]],[[["program",3]]],[[["interpreter",3]],["program",3]],[[["interpreter",3],["option",4,[["addrrepr",6]]],["instruction",4]]],[[["program",3],["option",4,[["addrrepr",6]]],["richinstruction",3]]],[[["interpreter",3],["addrrepr",6]]],[[["interpreter",3],["addrrepr",6]]],[[["interpreter",3],["addrrepr",6],["bool",0]]],[[["interpreter",3],["option",4,[["addrrepr",6]]],["richinstruction",3]]],[[["interpreter",3],["option",4,[["addrrepr",6]]],["instruction",4],["span",3]]],[[["interpreter",3]]],[[["program",3]],["program",3]],[[["instruction",4]],["usize",0]],[[["richinstruction",3]],["option",4,[["span",3]]]],[[["instruction",4],["span",3]],["richinstruction",3]],[[["instruction",4]],["i8",0]],[[["instruction",4]],["u8",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[3,"EqComparableFloat"],[4,"Addr"],[4,"Instruction"],[3,"Interpreter"],[3,"RichInstruction"],[3,"Program"],[13,"Absolute"],[13,"Procedure"],[13,"Offset"],[13,"LoadInt"],[13,"LoadFloat"],[13,"LoadString"],[13,"LoadBool"],[13,"Load"],[13,"LoadFrame"],[13,"Store"],[13,"StoreVar"],[13,"StoreMutVar"],[13,"StoreConstVar"],[13,"AssignVar"],[13,"LoadVar"],[13,"MakeFunc"],[13,"CallFunc"],[13,"Jump"],[13,"JumpIf"],[13,"JumpIfElse"]]},\
"terbium_compiler":{"doc":"","t":[3,6,11,11,11,12,11,11,11,12,11,11,11,12,11,11,11,12,11,11,11,11,11],"n":["Compiler","EntrypointFunction","append_to","borrow","borrow_mut","builder","compile","compile_node","create_entry_allocator","ctx","eval_expr","fmt","fn_value","fpm","from","into","len","module","optimize","prepare","try_from","try_into","type_id"],"q":["terbium_compiler","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,null,[[["vec",3]]],[[["",0]],["",0]],[[["",0]],["",0]],null,[[["context",3],["builder",3],["passmanager",3],["module",3],["spanned",3]],["result",4,[["functionvalue",3],["str",0]]]],[[["compiler",3],["spanned",3]],["result",4,[["str",0]]]],[[["compiler",3],["str",0]],["pointervalue",3]],null,[[["compiler",3],["spanned",3]],["result",4,[["anyvalueenum",4],["str",0]]]],[[["compiler",3],["formatter",3]],["result",6]],[[["compiler",3]],["functionvalue",3]],null,[[]],[[]],[[["",0]],["usize",0]],null,[[["compiler",3]],["result",4,[["str",0]]]],[[["compiler",3]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]]],"p":[[3,"Compiler"]]},\
"terbium_grammar":{"doc":"","t":[2,8,3,16,2,2,2,2,2,3,3,3,2,2,2,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,25,13,4,13,13,13,13,13,13,13,13,13,13,4,13,13,13,3,8,6,13,13,6,6,6,6,6,6,6,13,4,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,3,4,3,4,13,13,13,13,13,13,4,13,13,13,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,12,11,11,11,11,11,11,12,12,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,4,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"n":["Body","ChumskyParser","ChumskyStream","Error","Expr","Node","Operator","Param","ParseInterface","Source","Span","Spanned","Target","Token","TypeExpr","append_to","append_to","append_to","append_to","ast","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","boxed","chain","clone","clone","clone","clone_into","clone_into","clone_into","collect","context","debug","default","default","delimited_by","deref","deref_mut","end","end","end","eq","eq","eq","error","fetch_tokens","flatten","fmt","fmt","fmt","fmt","foldl","foldr","from","from","from","from","from","from","from","from","from","from","from_iter","from_nested","from_path","from_range","from_str","get_iter","get_iter","get_iter","hash","ignore_then","ignored","into","into","into","into","into_node","into_node_span","labelled","len","len","len","len","map","map","map_err","map_err_with_span","map_span","map_with_span","merge","ne","ne","new","new","node","node_mut","node_span","or","or_else","or_not","padded_by","parse","parse_recovery","parse_recovery_verbose","range","range","recover_with","repeated","repl","rewind","separated_by","single","source","span","span_mut","src","start","start","start","then","then_ignore","then_with","to","to_owned","to_owned","to_owned","to_path","to_string","token","tokenizer","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_map","type_id","type_id","type_id","type_id","unwrapped","validate","0","1","And","Any","Array","Array","Array","Assign","Attr","Attr","Attr","Auto","BinaryExpr","Body","Bool","Call","Cast","CommonParser","Declare","Expr","Expr","Float","Func","Generic","Ident","Ident","Ident","If","Integer","Module","Node","Not","Null","Nullable","Param","ParseInterface","RecursiveParser","Require","Return","SpannedBody","SpannedExpr","SpannedNode","SpannedOperator","SpannedParam","SpannedTarget","SpannedTypeExpr","String","Target","Tuple","TypeExpr","UnaryExpr","Union","While","append_to","append_to","append_to","append_to","append_to","append_to","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_file","from_string","get_body_parser","get_iter","get_iter","get_iter","get_iter","get_iter","get_iter","into","into","into","into","into","into","len","len","len","len","len","len","ne","ne","ne","ne","ne","ne","nested_parser","parse","parse","parse","parse","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","0","1","1","args","body","body","condition","condition","else_body","else_if_bodies","kwargs","lhs","operator","operator","rhs","value","value","0","0","0","0","body","const","mut","name","params","return_last","return_ty","targets","targets","ty","value","value","0","0","0","1","0","0","0","0","0","0","0","0","0","1","1","1","1","1","Char","Custom","End","Error","ErrorKind","Hint","HintAction","Identifier","Insert","Literal","None","Remove","Replace","TargetKind","Token","Unclosed","Unexpected","UnexpectedEnd","action","append_to","append_to","append_to","append_to","append_to","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","custom","eq","eq","eq","eq","eq","expected","expected_input_found","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_iter","hash","hint","into","into","into","into","into","kind","label","len","len","len","len","len","merge","message","message","ne","ne","ne","ne","ne","no_const_mut","span","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unclosed_delimiter","unexpected_token","with_label","write","0","before","span","start","0","0","0","0","0","Add","And","Arrow","Assign","BitAnd","BitLShift","BitNot","BitOr","BitRShift","BitXor","Brace","Bracket","Bracket","Break","ByteString","Cast","Class","Colon","Comma","Const","Continue","Div","Dot","Else","EndBracket","Eq","Export","Float","For","Func","Ge","Gt","Identifier","If","In","Integer","InterpolatedString","Invalid","Keyword","Keyword","Le","Let","Literal","Literal","Lt","Match","Mod","Mul","Mut","Ne","Not","Operator","Operator","Or","Paren","Pow","Private","Question","Range","RawString","Require","Return","Semicolon","StartBracket","String","String","StringLiteral","Sub","Throws","Token","Where","While","With","append_to","append_to","append_to","append_to","append_to","append_to","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_iter","get_iter","get_iter","get_iter","get_iter","get_iter","get_lexer","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","is_soft","len","len","len","len","len","len","ne","ne","ne","supports_binary","supports_unary","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","0","0","0","0","0","0","0"],"q":["terbium_grammar","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","terbium_grammar::ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","terbium_grammar::ast::Expr","","","","","","","","","","","","","","","","","","","","","","","","terbium_grammar::ast::Node","","","","","","","","","","","","","","","","terbium_grammar::ast::Target","","","","terbium_grammar::ast::TypeExpr","","","","","","","","","","","","","","terbium_grammar::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","terbium_grammar::error::ErrorKind","","","","terbium_grammar::error::HintAction","","","terbium_grammar::error::TargetKind","","terbium_grammar::tokenterbium_grammar::token::Literal","","","terbium_grammar::token::StringLiteral","","","","terbium_grammar::token::Token","","","","","",""],"d":["","A trait implemented by parsers.","A type that represents a stream of input tokens. Unlike …","The type of errors emitted by this parser.","","","","","","","","","","","","","","","","","","","","","","","","","Box the parser, yielding a parser that performs parsing …","Parse one thing and then another thing, attempting to …","","","","","","","Collect the output of this parser into a type implementing …","","Include this parser in the debugging output produced by …","","","Parse the pattern surrounded by the given delimiters.","","","","","","","","","","Eagerly evaluate the token stream, returning an iterator …","Flatten a nested collection.","","","","","Left-fold the output of the parser into a single value.","Right-fold the output of the parser into a single value.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Please note that Chumsky currently uses character indices …","Please note that Chumsky currently uses character indices …","","Returns the argument unchanged.","Create a new stream from an iterator of <code>(Token, Span)</code> …","Create a new <code>Stream</code> from an iterator of nested tokens and …","","","Attempt to convert the output of this parser into …","","","","","Parse one thing and then another thing, yielding only the …","Ignore the output of this parser, yielding <code>()</code> as an output …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Label the pattern parsed by this parser for more useful …","","","","","","Map the output of this parser to another value.","Map the primary error of this parser to another value.","Map the primary error of this parser to another value, …","","Map the output of this parser to another value, making use …","Merge the span with other span.","","","","","","","","Parse one thing or, on failure, another thing.","Map the primary error of this parser to a result. If the …","Attempt to parse something, but only if it exists.","Parse a pattern, but with an instance of another pattern …","Parse a stream of tokens, yielding an output <em>or</em> any errors …","Parse a stream of tokens, yielding an output if possible, …","Parse a stream of tokens, yielding an output if possible, …","","","Apply a fallback recovery strategy to this parser should …","Parse a pattern any number of times (including zero times).","","Parse a pattern. Afterwards, the input stream will be …","Parse a pattern, separated by another, any number of times.","","","","","","","","","Parse one thing and then another thing, yielding a tuple …","Parse one thing and then another thing, yielding only the …","Parse one thing and then another thing, creating the …","Transform all outputs of this parser to a pretermined …","","","","","","","","","","","","","","","","After a successful parse, apply a fallible function to the …","","","","","For parsers that produce a <code>Result</code> as their output, unwrap …","Validate an output, producing non-terminal errors if it …","","","Given A &amp; B, this becomes And(Ident(A), Ident(B))","The <code>any</code> type. It is compatible with any other type and any …","","Given T[], this becomes Array(Ident(T), None). Given T[n], …","","","","Given mod.Type, this becomes Attr(Ident(mod), “type”)","","The <code>auto</code> type, which is the default type and means that …","","","","","","","","","","","","Given Type&lt;A, B&gt;, this becomes Generic(Ident(Type), […","","Given T, this becomes Ident(“T”)","","","","","","Given !T, this becomes Not(Ident(T))","The constant null type. Only <code>null</code> will be compatible with …","Given ?T, this becomes Nullable(Ident(T)) Equivalent to T …","","","","","","","","","","","","","","","Given [A, B], this becomes Tuple([Ident(A), Ident(B)]).","","","Given A | B, this becomes Union(Ident(A), Ident(B))","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Reads and tokenizes the specified source file.","Tokenizes source code and parses it using this parser.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Write the error to the specified writer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,3,4,5,0,2,3,4,5,2,3,4,5,1,1,2,3,4,2,3,4,1,3,1,2,3,1,4,4,3,3,3,2,3,4,0,5,1,2,2,3,4,1,1,2,3,4,5,5,5,5,5,5,5,5,5,2,3,1,2,3,4,2,1,1,2,3,4,5,4,4,1,2,3,4,5,4,1,1,1,4,1,3,2,3,3,4,4,4,4,1,1,1,1,1,1,1,3,3,1,1,2,1,1,3,3,4,4,3,3,3,3,1,1,1,1,2,3,4,2,2,0,0,2,3,4,5,2,3,4,5,1,2,3,4,5,1,1,6,6,7,7,8,7,9,10,8,7,9,7,8,0,8,8,8,0,10,0,10,8,10,7,8,7,9,8,8,10,0,7,7,7,0,0,0,10,10,0,0,0,0,0,0,0,8,0,7,0,8,7,8,8,7,9,11,10,6,8,7,9,11,10,6,8,7,9,11,10,6,8,7,9,11,10,6,8,7,9,11,10,6,8,7,9,11,10,6,8,7,9,11,10,6,8,7,9,11,10,6,12,12,0,8,7,9,11,10,6,8,7,9,11,10,6,8,7,9,11,10,6,8,7,9,11,10,6,0,12,8,10,6,8,7,9,11,10,6,8,7,9,11,10,6,8,7,9,11,10,6,8,7,9,11,10,6,13,14,15,16,17,18,19,20,19,20,21,22,23,22,23,22,22,21,24,25,24,24,25,21,26,27,28,29,30,31,31,30,30,30,30,31,32,31,31,32,33,34,35,35,36,37,38,39,40,41,42,43,44,37,38,39,40,43,45,46,45,0,0,0,0,45,47,45,47,47,47,0,45,46,46,46,48,45,46,47,48,49,45,46,47,48,49,45,46,47,48,49,47,47,49,45,46,47,48,49,49,49,45,45,46,47,48,49,45,45,45,46,47,48,49,47,45,49,45,46,47,48,49,49,49,45,46,47,48,49,49,48,49,45,46,47,48,49,49,49,47,45,45,46,47,48,49,45,46,47,48,49,45,46,47,48,49,49,49,49,49,50,51,51,51,52,53,54,55,56,57,57,58,58,57,57,57,57,57,57,59,0,59,60,61,58,60,58,58,60,60,57,58,60,58,57,60,62,60,60,57,57,58,60,60,62,61,58,0,58,57,60,0,58,57,60,57,57,60,57,57,0,58,57,59,57,60,58,57,61,60,60,58,58,61,62,0,57,60,0,60,60,60,57,61,62,60,59,58,57,61,62,60,59,58,57,61,62,60,59,58,57,61,62,60,59,58,57,61,62,60,59,58,57,61,62,60,59,58,57,57,61,61,62,62,60,60,59,58,58,57,61,62,60,59,58,57,61,62,60,59,58,0,57,61,62,60,59,58,57,61,62,60,59,58,60,57,61,62,60,59,58,61,62,58,57,57,57,61,62,60,59,58,57,61,62,60,58,57,61,62,60,59,58,57,61,62,60,59,58,57,61,62,60,59,58,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[],["boxedparser",3]],[[],["map",3,[["then",3]]]],[[["source",3]],["source",3]],[[["span",3]],["span",3]],[[["spanned",3,[["clone",8]]]],["spanned",3,[["clone",8]]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[],["map",3]],[[["span",3]]],[[],["debug",3]],[[],["source",3]],[[],["span",3]],[[],["delimitedby",3]],[[["spanned",3]]],[[["spanned",3]]],[[["span",3]],["usize",0]],[[["span",3]],["usize",0]],[[["span",3]]],[[["source",3],["source",3]],["bool",0]],[[["span",3],["span",3]],["bool",0]],[[["spanned",3,[["partialeq",8]]],["spanned",3,[["partialeq",8]]]],["bool",0]],null,[[["stream",3]],["iterator",8]],[[],["map",3]],[[["source",3],["formatter",3]],["fmtresult",6]],[[["source",3],["formatter",3]],["fmtresult",6]],[[["span",3],["formatter",3]],["fmtresult",6]],[[["spanned",3,[["debug",8]]],["formatter",3]],["fmtresult",6]],[[],["foldl",3]],[[],["foldr",3]],[[]],[[]],[[]],[[],["stream",3,[["range",3,[["usize",0]]],["box",3,[["iterator",8],["global",3]]]]]],[[["vec",3,[["global",3]]]],["stream",3,[["range",3,[["usize",0]]],["box",3,[["iterator",8],["global",3]]]]]],[[],["stream",3,[["range",3,[["usize",0]]],["box",3,[["iterator",8],["global",3]]]]]],[[["str",0]],["stream",3,[["char",0],["range",3,[["usize",0]]],["box",3,[["iterator",8],["global",3]]]]]],[[["string",3]],["stream",3,[["char",0],["range",3,[["usize",0]]],["box",3,[["iterator",8],["global",3]]]]]],[[],["stream",3,[["range",3,[["usize",0]]],["box",3,[["iterator",8],["global",3]]]]]],[[]],[[],["stream",3]],[[],["stream",3,[["box",3,[["iterator",8],["global",3]]]]]],[[],["source",3]],[[["source",3],["range",3,[["usize",0]]]],["span",3]],[[],["map",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["source",3],["",0]]],[[],["map",3,[["then",3]]]],[[],["to",3]],[[]],[[]],[[]],[[]],[[["spanned",3]]],[[["spanned",3]]],[[],["label",3]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["spanned",3]],["spanned",3]],[[],["map",3]],[[],["maperr",3]],[[],["maperrwithspan",3]],[[["spanned",3],["fnonce",8]],["spanned",3]],[[],["mapwithspan",3]],[[["span",3],["span",3]],["span",3]],[[["source",3],["source",3]],["bool",0]],[[["span",3],["span",3]],["bool",0]],[[["range",3,[["usize",0]]]],["span",3]],[[["span",3]],["spanned",3]],[[["spanned",3]],["",0]],[[["spanned",3]],["",0]],[[["spanned",3]]],[[],["or",3]],[[],["orelse",3]],[[],["ornot",3]],[[],["map",3,[["then",3,[["map",3,[["then",3]]]]]]]],[[["",0]],["result",4,[["vec",3,[["global",3]]]]]],[[["",0]]],[[["",0]]],[[["span",3]],["range",3,[["usize",0]]]],null,[[],["recovery",3]],[[],["repeated",3]],[[],["source",3]],[[],["rewind",3]],[[],["separatedby",3]],[[["source",3],["usize",0]],["span",3]],[[["span",3]]],[[["spanned",3]],["span",3]],[[["spanned",3]],["span",3]],[[["span",3]],["source",3]],[[["span",3]],["usize",0]],[[["span",3]],["usize",0]],[[["span",3]]],[[],["then",3]],[[],["map",3,[["then",3]]]],[[],["thenwith",3]],[[],["to",3]],[[["",0]]],[[["",0]]],[[["",0]]],[[["source",3]],["pathbuf",3]],[[["",0]],["string",3]],null,null,[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["trymap",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[],["map",3,[["result",4]]]],[[],["validate",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["expr",4]],["expr",4]],[[["typeexpr",4]],["typeexpr",4]],[[["target",4]],["target",4]],[[["param",3]],["param",3]],[[["node",4]],["node",4]],[[["body",3]],["body",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["expr",4],["expr",4]],["bool",0]],[[["typeexpr",4],["typeexpr",4]],["bool",0]],[[["target",4],["target",4]],["bool",0]],[[["param",3],["param",3]],["bool",0]],[[["node",4],["node",4]],["bool",0]],[[["body",3],["body",3]],["bool",0]],[[["expr",4],["formatter",3]],["result",6]],[[["typeexpr",4],["formatter",3]],["result",6]],[[["target",4],["formatter",3]],["result",6]],[[["param",3],["formatter",3]],["result",6]],[[["node",4],["formatter",3]],["result",6]],[[["body",3],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["asref",8,[["path",3]]]],["result",4,[["vec",3,[["error",3]]]]]],[[["source",3],["string",3]],["result",4,[["vec",3,[["error",3]]]]]],[[],["recursiveparser",6,[["spannedbody",6]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["expr",4],["expr",4]],["bool",0]],[[["typeexpr",4],["typeexpr",4]],["bool",0]],[[["target",4],["target",4]],["bool",0]],[[["param",3],["param",3]],["bool",0]],[[["node",4],["node",4]],["bool",0]],[[["body",3],["body",3]],["bool",0]],[[["commonparser",25],["bracket",4],["",26,[["fn",8],["clone",8]]]],["commonparser",25]],[[["vec",3]],["result",4,[["vec",3,[["error",3]]]]]],[[["vec",3]],["result",4,[["expr",4],["vec",3,[["error",3]]]]]],[[["vec",3]],["result",4,[["node",4],["vec",3,[["error",3]]]]]],[[["vec",3]],["result",4,[["body",3],["vec",3,[["error",3]]]]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["hintaction",4]],["hintaction",4]],[[["",0],["",0]]],[[["span",3],["display",8]],["error",3]],[[["targetkind",4],["targetkind",4]],["bool",0]],[[["errorkind",4],["errorkind",4]],["bool",0]],[[["hintaction",4],["hintaction",4]],["bool",0]],[[["hint",3],["hint",3]],["bool",0]],[[["error",3],["error",3]],["bool",0]],null,[[["intoiterator",8],["option",4,[["",26,[["into",8,[["targetkind",4]]],["clone",8]]]]]],["error",3]],[[["targetkind",4],["formatter",3]],["fmtresult",6]],[[["targetkind",4],["formatter",3]],["result",6]],[[["errorkind",4],["formatter",3]],["result",6]],[[["hintaction",4],["formatter",3]],["result",6]],[[["hint",3],["formatter",3]],["result",6]],[[["error",3],["formatter",3]],["result",6]],[[]],[[["token",4]],["targetkind",4]],[[["char",0]],["targetkind",4]],[[]],[[]],[[]],[[]],[[["",0]]],[[["targetkind",4],["",0]]],null,[[]],[[]],[[]],[[]],[[]],null,null,[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["error",3],["error",3]],["error",3]],null,null,[[["targetkind",4],["targetkind",4]],["bool",0]],[[["errorkind",4],["errorkind",4]],["bool",0]],[[["hintaction",4],["hintaction",4]],["bool",0]],[[["hint",3],["hint",3]],["bool",0]],[[["error",3],["error",3]],["bool",0]],[[["span",3]],["error",3]],null,[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",26,[["into",8,[["targetkind",4]]],["clone",8]]],["",26,[["into",8,[["targetkind",4]]],["clone",8]]],["option",4,[["",26,[["into",8,[["targetkind",4]]],["clone",8]]]]]],["error",3]],[[["span",3],["token",4]],["error",3]],[[["error",3]],["error",3]],[[["error",3],["write",8]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["operator",4]],["operator",4]],[[["stringliteral",4]],["stringliteral",4]],[[["literal",4]],["literal",4]],[[["keyword",4]],["keyword",4]],[[["bracket",4]],["bracket",4]],[[["token",4]],["token",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["operator",4],["operator",4]],["bool",0]],[[["stringliteral",4],["stringliteral",4]],["bool",0]],[[["literal",4],["literal",4]],["bool",0]],[[["keyword",4],["keyword",4]],["bool",0]],[[["bracket",4],["bracket",4]],["bool",0]],[[["token",4],["token",4]],["bool",0]],[[["operator",4],["formatter",3]],["result",6]],[[["operator",4],["formatter",3]],["result",6]],[[["stringliteral",4],["formatter",3]],["result",6]],[[["stringliteral",4],["formatter",3]],["result",6]],[[["literal",4],["formatter",3]],["result",6]],[[["literal",4],["formatter",3]],["result",6]],[[["keyword",4],["formatter",3]],["result",6]],[[["keyword",4],["formatter",3]],["result",6]],[[["bracket",4],["formatter",3]],["result",6]],[[["token",4],["formatter",3]],["result",6]],[[["token",4],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["parser",8,[["char",0],["vec",3]]]],[[["operator",4],["",0]]],[[["stringliteral",4],["",0]]],[[["literal",4],["",0]]],[[["keyword",4],["",0]]],[[["bracket",4],["",0]]],[[["token",4],["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["keyword",4]],["bool",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["stringliteral",4],["stringliteral",4]],["bool",0]],[[["literal",4],["literal",4]],["bool",0]],[[["token",4],["token",4]],["bool",0]],[[["operator",4]],["bool",0]],[[["operator",4]],["bool",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[8,"ChumskyParser"],[3,"Source"],[3,"Span"],[3,"Spanned"],[3,"ChumskyStream"],[3,"Body"],[4,"TypeExpr"],[4,"Expr"],[4,"Target"],[4,"Node"],[3,"Param"],[8,"ParseInterface"],[13,"Integer"],[13,"Float"],[13,"String"],[13,"Bool"],[13,"Ident"],[13,"Array"],[13,"Cast"],[13,"Attr"],[13,"Call"],[13,"If"],[13,"While"],[13,"BinaryExpr"],[13,"UnaryExpr"],[13,"Module"],[13,"Expr"],[13,"Return"],[13,"Require"],[13,"Func"],[13,"Declare"],[13,"Assign"],[13,"Ident"],[13,"Array"],[13,"Attr"],[13,"Ident"],[13,"Attr"],[13,"Generic"],[13,"Union"],[13,"And"],[13,"Nullable"],[13,"Not"],[13,"Array"],[13,"Tuple"],[4,"TargetKind"],[4,"ErrorKind"],[4,"HintAction"],[3,"Hint"],[3,"Error"],[13,"Unexpected"],[13,"Unclosed"],[13,"Replace"],[13,"Insert"],[13,"Remove"],[13,"Char"],[13,"Token"],[4,"Operator"],[4,"Token"],[4,"Bracket"],[4,"Keyword"],[4,"StringLiteral"],[4,"Literal"],[13,"String"],[13,"Integer"],[13,"Float"],[13,"String"],[13,"ByteString"],[13,"RawString"],[13,"InterpolatedString"],[13,"Invalid"],[13,"Operator"],[13,"Literal"],[13,"Keyword"],[13,"Identifier"],[13,"StartBracket"],[13,"EndBracket"]]},\
"terbium_interpreter":{"doc":"The interpreter for Terbium.","t":[13,3,6,13,13,3,3,13,6,3,3,3,3,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12],"n":["Bool","Context","DefaultInterpreter","Float","Integer","Interner","Interpreter","Null","ObjectRef","ObjectStore","Scope","ScopeEntry","Stack","String","TerbiumObject","append_to","append_to","append_to","append_to","append_to","append_to","append_to","append_to","assign_var","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","ctx","decr_ptr","default","default","default","default","default","enter_scope","eq","exit_scope","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","get_bool_object","get_iter","get_object_repr","incr_ptr","intern","into","into","into","into","into","into","into","into","is_const","is_mut","is_truthy","len","len","len","len","len","len","len","len","load_bool","load_int","loc","locals","locals","locals_mut","lookup","lookup_var","lookup_var_mut","ne","new","new","new","new","new","next_free","next_free_mut","pop","pop","pop_cloned","pop_cloned","pop_detailed","pop_or_null","pop_ref","push","push","resolve","resolve_or_null","run_bytecode","stack","stack_is_empty","store","store","store_auto","store_var","string_lookup","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_capacity","0","0","0","0"],"q":["terbium_interpreter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","terbium_interpreter::TerbiumObject","","",""],"d":["","Represents an interpreter’s context during runtime.","","","","","","","The integer type of the location of a <code>TerbiumObject</code>.","A wrapper around a <code>HashMap</code> that maps object locations to …","Represents a scope of identifiers.","Represents an entry in a scope.","Represents stack wrapper around an array.","","The internal Terbium object model. These are created …","","","","","","","","","Reassigns the value at the given location to the given <code>key</code>.","","","","","","","","","","","","","","","","","","","","Decrements <code>ptr</code> by 1.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Increments <code>ptr</code> by 1.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether or not this entry is a constant.","Whether or not this entry is mutable.","","","","","","","","","","Loads the given bool and returns its location.","Loads the given integer and returns its location.","","Returns a reference to the current local scope.","","Returns a mutable reference to the current local scope.","","","","","","","","","","Retrieves a reference to the next free slot.","Retrieves a mutable reference to the free slot.","Pops the previous object in the stack and moves the …","Pops the last object from the stack and returns a …","Gets a cloned version of the previous object in the stack, …","Pops the last object from the stack, clones it, and …","Pops the last object from the stack and returns a tuple …","Pops the last object from the stack and returns a …","Pops the last object from the stack and returns its …","Pushes the given object to the stack.","Pushes an object by location to the stack.","Resolves an object pointer into a reference of the object …","Resolves an object pointer into a reference of the object …","Integers with a mantissa exceeding a width of 52 bits will …","","Return <code>true</code> if the stack is empty","Stores the object at the given location.","","Stores the object at a pre-determined location.","Stores the <code>ScopeEntry</code> in the given <code>key</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[1,0,0,1,1,0,0,1,0,0,0,0,0,1,0,2,1,3,4,5,6,7,8,7,2,1,3,4,5,6,7,8,2,1,3,4,5,6,7,8,1,1,8,3,3,4,6,7,8,7,1,7,2,1,3,4,5,6,7,8,9,2,1,3,4,5,6,7,8,8,1,8,3,2,2,1,3,4,5,6,7,8,5,5,8,2,1,3,4,5,6,7,8,7,7,5,7,6,7,2,7,7,1,3,4,6,7,8,3,3,3,7,3,7,7,7,7,3,7,4,4,8,8,7,7,7,7,7,8,1,2,1,3,4,5,6,7,8,2,1,3,4,5,6,7,8,2,1,3,4,5,6,7,8,2,10,11,12,13],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["vec",3]]],[[["context",3],["usize",0],["objectref",6]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["terbiumobject",4]],["terbiumobject",4]],[[["",0],["",0]]],null,[[["stack",3]]],[[],["stack",3]],[[],["objectstore",3]],[[],["scope",3]],[[],["context",3]],[[],["interpreter",3]],[[["context",3]]],[[["terbiumobject",4],["terbiumobject",4]],["bool",0]],[[["context",3]]],[[["interner",3],["formatter",3]],["result",6]],[[["terbiumobject",4],["formatter",3]],["result",6]],[[["stack",3],["formatter",3]],["result",6]],[[["objectstore",3],["formatter",3]],["result",6]],[[["scopeentry",3],["formatter",3]],["result",6]],[[["scope",3],["formatter",3]],["result",6]],[[["context",3],["formatter",3]],["result",6]],[[["interpreter",3],["formatter",3]],["result",6]],[[["scopeentry",3]],["objectref",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["interpreter",3],["terbiumobject",4]],["objectref",6]],[[["",0]]],[[["interpreter",3],["terbiumobject",4]],["string",3]],[[["stack",3]]],[[["interner",3],["str",0]],["usize",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["scopeentry",3]],["bool",0]],[[["scopeentry",3]],["bool",0]],[[["interpreter",3],["terbiumobject",4]],["bool",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["",0]],["usize",0]],[[["context",3],["bool",0]],["objectref",6]],[[["context",3],["i128",0]],["objectref",6]],null,[[["context",3]],["scope",3]],null,[[["context",3]],["scope",3]],[[["interner",3],["usize",0]],["str",0]],[[["context",3],["usize",0]],["option",4,[["scopeentry",3]]]],[[["context",3],["usize",0]],["option",4,[["scopeentry",3]]]],[[["terbiumobject",4],["terbiumobject",4]],["bool",0]],[[],["stack",3]],[[],["objectstore",3]],[[],["scope",3]],[[],["context",3]],[[],["interpreter",3]],[[["stack",3]],["objectref",6]],[[["stack",3]],["objectref",6]],[[["stack",3]],["objectref",6]],[[["context",3]],["terbiumobject",4]],[[["stack",3]],["objectref",6]],[[["context",3]],["terbiumobject",4]],[[["context",3]]],[[["context",3]],["terbiumobject",4]],[[["context",3]],["objectref",6]],[[["stack",3],["objectref",6]]],[[["context",3],["objectref",6]]],[[["objectstore",3],["objectref",6]],["terbiumobject",4]],[[["objectstore",3],["objectref",6]],["terbiumobject",4]],[[["interpreter",3],["program",3]]],[[["interpreter",3]],["stack",3]],[[["context",3]],["bool",0]],[[["context",3],["objectref",6],["terbiumobject",4]],["objectref",6]],null,[[["context",3],["terbiumobject",4]],["objectref",6]],[[["context",3],["usize",0],["scopeentry",3]]],[[["interpreter",3],["usize",0]],["str",0]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["usize",0]],["interner",3]],null,null,null,null],"p":[[4,"TerbiumObject"],[3,"Interner"],[3,"Stack"],[3,"ObjectStore"],[3,"ScopeEntry"],[3,"Scope"],[3,"Context"],[3,"Interpreter"],[6,"ObjectRef"],[13,"Integer"],[13,"Float"],[13,"String"],[13,"Bool"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
