var searchIndex = JSON.parse('{\
"terbium":{"doc":"","t":[12,12,12,13,13,13,13,13,13,13,13,3,3,4,4,4,8,4,13,4,6,4,3,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,6,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,4,13,13,13,13,13,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,11,11,11,11,12,11,11,11,11,11,11,11,11,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"n":["0","0","1","Absolute","Add","And","Array","Arrow","Assign","Assign","AssignVar","AstBody","AstError","AstExpr","AstNode","AstOperator","AstParseInterface","AstToken","Attr","BcAddr","BcAddrRepr","BcInstruction","BcProgram","BcTransformer","BinOpAdd","BinOpBitAnd","BinOpBitOr","BinOpBitXor","BinOpDiv","BinOpMul","BinOpPow","BinOpSub","BinOpTrueDiv","BinaryExpr","BitAnd","BitLShift","BitNot","BitOr","BitRShift","BitXor","Bool","Bool","Call","CallFunc","Cast","Cast","Colon","Comma","Compiler","Declare","DefaultInterpreter","Div","Dot","EndBracket","EnterScope","Eq","EqComparableFloat","ExitScope","Expr","Float","Float","Func","Ge","Gt","Halt","Ident","Identifier","If","Integer","Integer","Interpreter","Invalid","Jump","JumpIf","JumpIfElse","Keyword","Le","Literal","Load","LoadBool","LoadFloat","LoadFrame","LoadInt","LoadString","LoadVar","Lt","MakeFunc","Mod","Module","Mul","Ne","Not","Null","Offset","OpEq","OpGe","OpGt","OpLe","OpLogicalAnd","OpLogicalNot","OpLogicalOr","OpLt","OpNe","Operator","Or","Pop","Pow","Procedure","Question","Range","Require","Ret","RetNull","Return","Semicolon","Stack","StartBracket","Store","StoreConstVar","StoreMutVar","StoreVar","String","String","Sub","TerbiumObject","UnOpBitNot","UnOpNeg","UnOpPos","UnaryExpr","While","analyzer","append_to","append_to","append_to","append_to","append_to","append_to","append_to","append_to","append_to","append_to","append_to","append_to","append_to","append_to","append_to","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","builder","bytecode","bytes","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","compile","compile_body_entrypoint","compile_node","compiler","create_entry_allocator","create_procedure","ctx","ctx","current_addr","custom","decr_ptr","default","default","default","default","default","dis","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","eval_expr","expected","expected_input_found","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fn_value","fpm","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_bytes","from_file","from_iter","from_string","get_bool_object","get_iter","get_iter","get_iter","get_iter","get_iter","get_iter","get_iter","get_iter","get_iter","get_object_repr","grammar","hash","hash","hash","hash","hint","incr_ptr","inner","interpret_body","interpret_body_no_return","interpret_body_scoped","interpret_body_scoped_no_return","interpret_expr","interpret_node","interpreter","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_truthy","kind","label","len","len","len","len","len","len","len","len","len","len","len","len","len","len","len","merge","message","module","new","new","new","new","next_addr","next_free","next_free_mut","no_const_mut","optimize","parse","parse","parse","parse","partial_cmp","pop","pop_cloned","pop_procedure","prepare","program","push","push","push","push_enter_scope","push_exit_scope","push_return","push_rich","push_spanned","reset_program","resolve","run_bytecode","size","sources","span","stack","stack_diff","string_lookup","supports_binary","supports_unary","to_instr_id","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unclosed_delimiter","unexpected_token","with_label","write","0","0","0","0","0","0","0","0","1","1","args","body","body","condition","condition","else_body","else_if_bodies","kwargs","lhs","operator","operator","rhs","value","value","0","0","0","0","body","const","mut","name","params","return_last","return_ty","targets","targets","ty","value","value","0","0","0","0","0","0","0","0","0","0","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1","0","0","0","0"],"q":["terbiumterbium::AstExpr","","","","","","","","","","","","","","","","","","","","","","","","terbium::AstNode","","","","","","","","","","","","","","","","terbium::AstToken","","","","","","","terbium::BcAddr","","","","terbium::BcInstruction","","","","","","","","","","","","","","","","","","terbium::TerbiumObject","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Represents stack wrapper around an array.","","","","","","","","","The internal Terbium object model. These are created …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Decrements <code>ptr</code> by 1.","","","","Returns the default value of 0.0","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Reads and tokenizes the specified source file.","","Tokenizes source code and parses it using this parser.","","","","","","","","","","","","","","","","","","Increments <code>ptr</code> by 1.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","Retrieves a reference to the next free slot.","Retrieves a mutable reference to the free slot.","","","Errors","","","","","Pops the previous object in the stack and moves the …","Gets a cloned version of the previous object in the stack, …","","","","","Pushes the given object to the stack.","","","","","","","","Resolves all procedures to their absolute address","Integers with a mantissa exceeding a width of 52 bits will …","","Create a <code>Cache</code> from a collection of ID/strings, where each …","","","Return a i8 representing the change in the count of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Write the error to the specified writer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[6,11,11,7,12,12,9,13,10,13,8,0,0,0,0,0,0,0,9,0,0,0,0,0,8,8,8,8,8,8,8,8,8,9,12,12,12,12,12,12,5,9,9,8,9,13,13,13,0,10,0,12,13,13,8,12,0,8,10,5,9,10,12,12,8,9,13,9,5,9,0,13,8,8,8,13,12,13,8,8,8,8,8,8,8,12,8,12,10,12,12,12,5,7,8,8,8,8,8,8,8,8,8,13,12,8,12,7,13,12,10,8,8,10,13,0,13,8,8,8,8,5,9,12,0,8,8,8,9,9,0,30,21,5,29,31,6,7,8,2,9,10,11,28,12,13,30,21,5,29,31,6,7,8,2,9,10,11,28,12,13,30,21,5,29,31,6,7,8,2,9,10,11,28,12,13,21,0,2,5,6,7,8,9,10,11,12,13,5,6,7,8,9,10,11,12,13,21,21,21,0,21,2,21,31,2,28,29,30,29,31,6,2,2,5,6,6,7,8,9,10,11,28,12,13,5,6,7,8,28,12,13,21,28,28,21,5,29,31,6,6,7,8,2,9,10,11,28,12,12,13,13,21,21,30,21,5,29,31,6,6,7,8,2,9,10,11,28,12,13,2,47,2,47,31,5,6,7,8,9,10,11,12,13,31,0,6,7,12,13,28,29,2,30,30,30,30,30,30,0,30,21,5,29,31,6,7,8,2,9,10,11,28,12,13,31,28,28,30,21,5,29,31,6,7,8,2,9,10,11,28,12,13,28,28,21,30,29,31,2,2,29,29,28,21,47,9,10,11,7,29,29,2,21,30,30,29,2,30,30,30,30,30,30,2,31,8,0,28,31,8,31,12,12,8,5,6,7,8,9,10,11,12,13,6,12,13,30,21,5,29,31,6,7,8,2,9,10,11,28,12,13,30,21,5,29,31,6,7,8,2,9,10,11,28,12,13,30,21,5,29,31,6,7,8,2,9,10,11,28,12,13,28,28,28,28,48,49,50,51,52,53,54,55,54,55,56,57,58,57,58,57,57,56,59,60,59,59,60,56,61,62,63,64,65,66,66,65,65,65,65,66,67,66,66,67,68,69,70,71,72,73,74,75,76,77,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,94,95,96,97,98],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[2,[[1,[3,4]]]],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[14,15,16,17,11],[[20,[18,19]]]],[[21,11],[[20,[19]]]],[[21,22],[[20,[19]]]],0,[[21,19],23],[2,24],0,0,[[2,[25,[24]]],7],[[26,27],28],[29],[[],30],[[],29],[[],31],[[],6],[[],2],[2,[[20,[32]]]],[[5,5],33],[[6,6],33],[[6,34],33],[[7,7],33],[[8,8],33],[[9,9],33],[[10,10],33],[[11,11],33],[[28,28],33],[[12,12],33],[[13,13],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[],33],[[21,22],[[20,[35,19]]]],0,[25,28],[[21,36],[[20,[37]]]],[[5,36],[[20,[37]]]],[[29,36],[[20,[37]]]],[[31,36],[[20,[37]]]],[[6,36],[[20,[37]]]],[[6,36],[[20,[37]]]],[[7,36],[[20,[37]]]],[[8,36],[[20,[37]]]],[[2,36],[[20,[37]]]],[[9,36],[[20,[37]]]],[[10,36],[[20,[37]]]],[[11,36],[[20,[37]]]],[[28,36],[[20,[37]]]],[[12,36],[[20,[37]]]],[[12,36],[[20,[37]]]],[[13,36],[[20,[37]]]],[[13,36],[[20,[37]]]],[21,18],0,[[]],[[]],[[]],[[]],[[]],[[]],[34,6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],[[20,[[1,[28,4]]]]]],[[],2],[[38,39],[[20,[[1,[28,4]]]]]],[[31,5],24],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[31,5],39],0,[6],[7],[12],[13],0,[29],[2,40],[[30,[25,[24]],11]],[[30,[25,[24]],[1,[[22,[10]],4]]]],[[30,24,11]],[[30,24,[1,[[22,[10]],4]]]],[[30,[25,[24]],[22,[9]]]],[[30,[25,[24]],[22,[10]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[31,5],33],0,0,[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[],24],[[28,28],28],0,0,[[],30],[[],29],[[],31],[[],2],[[2,[25,[24]]],7],[29,24],[29,24],[26,28],[21,[[20,[19]]]],[[[1,[4]]],[[20,[[1,[28,4]]]]]],[[[1,[4]]],[[20,[9,[1,[28,4]]]]]],[[[1,[4]]],[[20,[10,[1,[28,4]]]]]],[[[1,[4]]],[[20,[11,[1,[28,4]]]]]],[[7,7],[[25,[41]]]],[29,24],[29,24],[2],[21],[30,2],[[30,[25,[24]],8]],[[29,24]],[[2,[25,[24]],42]],[[30,24]],[[30,24]],[[30,24,33]],[[30,[25,[24]],42]],[[30,[25,[24]],8,26]],[30],[2,2],[[31,2]],[8,24],[[],43],0,[31,29],[8,44],[[31,24],19],[12,33],[12,33],[8,3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],39],[[],39],[[],39],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[[],45],[25,28],[[26,13],28],[28,28],[[28,46]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"p":[[3,"Vec"],[3,"BcProgram"],[15,"u8"],[3,"Global"],[4,"TerbiumObject"],[3,"EqComparableFloat"],[4,"BcAddr"],[4,"BcInstruction"],[4,"AstExpr"],[4,"AstNode"],[3,"AstBody"],[4,"AstOperator"],[4,"AstToken"],[3,"Context"],[3,"Builder"],[3,"PassManager"],[3,"Module"],[3,"FunctionValue"],[15,"str"],[4,"Result"],[3,"Compiler"],[3,"Spanned"],[3,"PointerValue"],[15,"usize"],[4,"Option"],[3,"Span"],[8,"Display"],[3,"AstError"],[3,"Stack"],[3,"BcTransformer"],[3,"Interpreter"],[3,"Error"],[15,"bool"],[15,"f64"],[4,"BasicValueEnum"],[3,"Formatter"],[3,"Error"],[3,"Source"],[3,"String"],[8,"Iterator"],[4,"Ordering"],[3,"RichInstruction"],[8,"Cache"],[15,"i8"],[3,"TypeId"],[8,"Write"],[8,"AstParseInterface"],[13,"Integer"],[13,"Float"],[13,"String"],[13,"Bool"],[13,"Ident"],[13,"Array"],[13,"Cast"],[13,"Attr"],[13,"Call"],[13,"If"],[13,"While"],[13,"BinaryExpr"],[13,"UnaryExpr"],[13,"Module"],[13,"Expr"],[13,"Return"],[13,"Require"],[13,"Func"],[13,"Declare"],[13,"Assign"],[13,"Invalid"],[13,"Operator"],[13,"Literal"],[13,"Keyword"],[13,"Identifier"],[13,"StartBracket"],[13,"EndBracket"],[13,"Absolute"],[13,"Procedure"],[13,"Offset"],[13,"LoadInt"],[13,"LoadFloat"],[13,"LoadString"],[13,"LoadBool"],[13,"Load"],[13,"LoadFrame"],[13,"Store"],[13,"StoreVar"],[13,"StoreMutVar"],[13,"StoreConstVar"],[13,"AssignVar"],[13,"LoadVar"],[13,"MakeFunc"],[13,"CallFunc"],[13,"Jump"],[13,"JumpIf"],[13,"JumpIfElse"],[13,"Integer"],[13,"Float"],[13,"String"],[13,"Bool"]]},\
"terbium_analyzer":{"doc":"","t":[12,12,13,4,3,4,3,13,13,13,13,13,13,13,3,13,4,13,13,13,13,13,13,13,3,3,13,13,13,13,13,13,13,4,13,13,4,13,13,4,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,12,11,5,5,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,0,5,5,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,5,5],"n":["0","0","Alert","AnalyzerKind","AnalyzerMessage","AnalyzerMessageKind","AnalyzerSet","And","Any","ApplyBinary","ApplyUnary","Array","Bool","Const","Context","Deferred","DeferredType","Float","Func","GlobalMutableVariables","IncompatibleTypes","Info","Int","Known","MockScope","MockScopeEntry","Mut","NonAscii","NonPascalCase","NonSnakeCase","None","Null","Primitive","PrimitiveType","ReassignedImmutableVariables","RedeclaredConstVariables","ScopeEntryModifier","String","Tuple","Type","TypeOf","UnbalancedIfStatements","UninferableTypes","Union","Unknown","UnnecessaryMutVariables","UnresolvedIdentifiers","UnsupportedOperators","UnusedVariables","all","append_to","append_to","append_to","append_to","append_to","append_to","append_to","append_to","append_to","append_to","append_to","ast","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cache","cache","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","close_var_match","code","contains","default","default","enter_scope","eq","eq","eq","eq","eq","eq","exit_scope","flatten","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_allowed_disabled","from_disabled","from_str","from_tokens","get_binary_op_outcome","get_binary_op_outcome","get_iter","get_iter","get_iter","get_iter","get_iter","get_iter","get_iter","get_iter","get_unary_op_outcome","get_unary_op_outcome","global_mutable_variable","hash","hash","hash","hash","incompatible_types","infer_type","into","into","into","into","into","into","into","into","into","into","into","is_compatible_with","is_const","is_error","is_let","is_mut","is_mutated","is_strictly_unknown","is_top_level","is_unknown","is_warning","kind","len","len","len","len","len","len","len","len","len","len","len","locals","locals_mut","lookup","lookup_var","lookup_var_mut","messages","modifier","mutated","name","new","new","new","non_snake_case","none","reassigned_immutable_variable","redeclared_const_variable","report","resolve_deferred_type","resolve_type_expr","run_analysis","scopes","severity","span","store_var","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","tokens","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unbalanced_if_statement","unbalanced_if_statement_no_else","uninferable_type","unnecessary_mut_variable","unresolved_identifier","unsupported_binary_operator","unsupported_unary_operator","unused_variable","used","util","visit_expr","visit_node","warn_level","write","0","0","0","0","0","1","1","2","0","0","0","0","0","0","0","1","1","1","1","get_levenshtein_distance","to_snake_case"],"q":["terbium_analyzerterbium_analyzer::AnalyzerMessageKind","terbium_analyzer::DeferredType","","","","","","","terbium_analyzer::Type","","","","","","","","","","","terbium_analyzer::util",""],"d":["","","","","","","","","","","","","","","","","A struct that stores instructions on how to resolve a type.","","","[W005] Global mutable variables are highly discouraged","[E005] Received a type that was incompatible with what was …","","","A substitute for a known type, but when required as a …","","","","[W002] Identifier names should contain only ASCII …","[W001] Type identifier names, such as classes or traits …","[W000] Non-type identifier names should be snake_case","","","","","[E003] An immutable variable was reassigned to","[E002] A variable declared as <code>const</code> was redeclared later on","","","","","Reference this entry and retrieve its type after it is …","[W006] Value of an if statement has unbalanced types","[E006] The type could not be inferred","","","[W004] A variable or parameter was declared as mutable, …","[E001] An identifier (e.g. a variable) could not be found …","[E004] The operator is not supported for the given type","[W003] A variable or parameter was declared but never used","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","References the error index","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Analyze the given context.","","Returns a number 1 to 5 (inclusive) representing the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Analyzes the expression.","Analyzes the node.","","Write error to specified writer.","","","","","","","","","","","","","","","","","","","","",""],"i":[17,1,6,0,0,0,0,9,9,8,8,9,7,10,0,9,0,7,9,12,12,6,7,8,0,0,10,12,12,12,10,9,9,0,12,12,0,7,9,0,8,12,12,9,9,12,12,12,12,1,24,3,6,7,8,9,10,11,17,12,1,3,24,3,6,7,8,9,10,11,17,12,1,24,3,6,7,8,9,10,11,17,12,1,3,3,6,7,8,9,10,11,12,1,6,7,8,9,10,11,12,1,3,12,1,17,1,3,6,7,8,9,10,12,3,9,6,7,7,8,9,9,10,11,17,12,12,1,24,3,6,7,8,9,10,11,17,12,1,1,1,12,3,7,9,6,7,8,9,10,11,12,1,7,9,24,7,8,9,12,24,0,24,3,6,7,8,9,10,11,17,12,1,9,11,12,11,11,11,9,3,9,12,24,24,3,6,7,8,9,10,11,17,12,1,3,3,17,3,3,3,11,11,11,24,11,17,24,1,24,24,24,3,0,0,3,12,11,3,6,7,8,9,10,11,12,1,7,9,12,3,24,3,6,7,8,9,10,11,17,12,1,24,3,6,7,8,9,10,11,17,12,1,11,24,3,6,7,8,9,10,11,17,12,1,24,24,24,24,24,24,24,24,11,0,0,0,12,24,33,34,35,36,37,36,37,37,38,39,40,41,42,43,44,39,40,41,43,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[],1],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],[2],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,[[5,[4]]]],0,[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[1,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[3,13],14],[12,15],[[1,12],16],[[],17],[[],1],[3],[[6,6],16],[[7,7],16],[[8,8],16],[[9,9],16],[[10,10],16],[[12,12],16],[[3,1,2]],[9,9],[[6,18],19],[[7,18],19],[[7,18],19],[[8,18],19],[[9,18],19],[[9,18],19],[[10,18],19],[[11,18],19],[[17,18],19],[[12,18],19],[[12,18],19],[[1,18],19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[20,20],1],[20,1],[13,[[21,[12]]]],[[2,2],3],[[7,22,9],[[14,[9]]]],[[9,22,9],[[14,[9]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[7,22],[[14,[9]]]],[[9,22],[[14,[9]]]],[23,24],[7],[8],[9],[12],[[23,23,25,[14,[23]],25],24],[[1,3,2,26],[[21,[9,13]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[9,9],16],[11,16],[12,16],[11,16],[11,16],[11,16],[9,16],[3,16],[9,16],[12,16],0,[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[3,17],[3,17],[[17,13],[[14,[11]]]],[[3,25],[[14,[11]]]],[[3,25],[[14,[11]]]],0,0,0,0,[[6,23],24],[[25,9,10,23],11],[[],17],[[13,25,23],24],[[],1],[[13,23,23,16],24],[[13,23,23],24],0,[[3,8],9],[[3,2,[26,[28]]]],[[1,3],[[21,[[2,[24]],13]]]],0,[12,15],0,[[3,25,11]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],25],[[],25],[[],25],0,[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],0,[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[23,23,25,23,25],24],[[23,23,25],24],[[13,23],24],[[13,23],24],[[13,14,23],24],[[23,25,23,25,23,22,23],24],[[23,25,23,22,23],24],[[13,23],24],0,0,[[1,3,2,[26,[30]]],[[21,[9,13]]]],[[1,3,2,[26,[31]]],[[21,[13]]]],[12,[[14,[15]]]],[[24,[5,[4]],32]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[13,13],27],[13,25]],"p":[[3,"AnalyzerSet"],[3,"Vec"],[3,"Context"],[3,"Source"],[8,"Cache"],[4,"AnalyzerMessageKind"],[4,"PrimitiveType"],[4,"DeferredType"],[4,"Type"],[4,"ScopeEntryModifier"],[3,"MockScopeEntry"],[4,"AnalyzerKind"],[15,"str"],[4,"Option"],[15,"u8"],[15,"bool"],[3,"MockScope"],[3,"Formatter"],[6,"Result"],[3,"HashSet"],[4,"Result"],[4,"Operator"],[3,"Span"],[3,"AnalyzerMessage"],[3,"String"],[3,"Spanned"],[15,"usize"],[4,"TypeExpr"],[3,"TypeId"],[4,"Expr"],[4,"Node"],[8,"Write"],[13,"Alert"],[13,"TypeOf"],[13,"Known"],[13,"ApplyUnary"],[13,"ApplyBinary"],[13,"Primitive"],[13,"Union"],[13,"And"],[13,"Array"],[13,"Tuple"],[13,"Func"],[13,"Deferred"]]},\
"terbium_bytecode":{"doc":"Crate for Terbium byte-code/intermediate represenation.","t":[12,13,4,6,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,4,3,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,3,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"n":["0","Absolute","Addr","AddrRepr","AssignVar","BinOpAdd","BinOpBitAnd","BinOpBitOr","BinOpBitXor","BinOpDiv","BinOpMul","BinOpPow","BinOpSub","BinOpTrueDiv","CallFunc","EnterScope","EqComparableFloat","ExitScope","Halt","Instruction","Interpreter","Jump","JumpIf","JumpIfElse","Load","LoadBool","LoadFloat","LoadFrame","LoadInt","LoadString","LoadVar","MakeFunc","Offset","OpEq","OpGe","OpGt","OpLe","OpLogicalAnd","OpLogicalNot","OpLogicalOr","OpLt","OpNe","Pop","Procedure","Program","Ret","RetNull","RichInstruction","Store","StoreConstVar","StoreMutVar","StoreVar","UnOpBitNot","UnOpNeg","UnOpPos","append_to","append_to","append_to","append_to","append_to","append_to","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","create_procedure","current_addr","default","default","default","dis","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_bytes","from_iter","get_iter","get_iter","get_iter","get_iter","hash","hash","inner","instr","interpret_body","interpret_body_no_return","interpret_body_scoped","interpret_body_scoped_no_return","interpret_expr","interpret_node","into","into","into","into","into","into","into_instr","len","len","len","len","len","len","name","new","new","next_addr","partial_cmp","pop_procedure","program","push","push","push_enter_scope","push_exit_scope","push_return","push_rich","push_spanned","reset_program","resolve","size","span","spanned","stack_diff","to_instr_id","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","1","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","0","1"],"q":["terbium_bytecodeterbium_bytecode::Addr","","","","terbium_bytecode::Instruction","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the default value of 0.0","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","Resolves all procedures to their absolute address","","","","Return a i8 representing the change in the count of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[4,5,0,0,6,6,6,6,6,6,6,6,6,6,6,6,0,6,6,0,0,6,6,6,6,6,6,6,6,6,6,6,5,6,6,6,6,6,6,6,6,6,6,5,0,6,6,0,6,6,6,6,6,6,6,10,4,5,6,7,2,10,4,5,6,7,2,10,4,5,6,7,2,2,4,5,6,7,4,5,6,7,2,2,10,4,2,2,4,4,5,6,7,4,4,5,6,7,2,10,4,4,5,6,7,7,2,2,2,4,5,6,7,4,5,2,7,10,10,10,10,10,10,10,4,5,6,7,2,7,10,4,5,6,7,2,7,10,2,2,5,2,10,10,2,10,10,10,10,10,10,2,6,7,7,6,6,4,5,6,7,4,10,4,5,6,7,2,10,4,5,6,7,2,10,4,5,6,7,2,29,30,31,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,48],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,[[1,[3]]]],[4,4],[5,5],[6,6],[7,7],[[]],[[]],[[]],[[]],[2,8],[[2,[9,[8]]],5],[[],10],[[],4],[[],2],[2,11],[[4,12],13],[[4,4],13],[[5,5],13],[[6,6],13],[[7,7],13],[[4,14],15],[[4,14],15],[[5,14],15],[[6,14],15],[[7,14],15],[[2,14],15],[[]],[12,4],[[]],[[]],[[]],[[]],[6,7],[[]],[[],2],[16,2],[[]],[[]],[[]],[[]],[4],[5],[2,17],[7,6],[[10,[9,[8]],18]],[[10,[9,[8]],[1,[[20,[19]]]]]],[[10,8,18]],[[10,8,[1,[[20,[19]]]]]],[[10,[9,[8]],[20,[21]]]],[[10,[9,[8]],[20,[19]]]],[[]],[[]],[[]],[[]],[[]],[[]],[7,6],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[7,9],[[],10],[[],2],[[2,[9,[8]]],5],[[5,5],[[9,[23]]]],[2],[10,2],[[10,[9,[8]],6]],[[2,[9,[8]],7]],[[10,8]],[[10,8]],[[10,8,13]],[[10,[9,[8]],7]],[[10,[9,[8]],6,24]],[10],[2,2],[6,22],[7,[[9,[24]]]],[[6,24],7],[6,25],[6,3],[[]],[[]],[[]],[[]],[[],26],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],28],[[],28],[[],28],[[],28],[[],28],[[],28],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"p":[[3,"Vec"],[3,"Program"],[15,"u8"],[3,"EqComparableFloat"],[4,"Addr"],[4,"Instruction"],[3,"RichInstruction"],[6,"AddrRepr"],[4,"Option"],[3,"Interpreter"],[6,"Result"],[15,"f64"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"IntoIterator"],[8,"Iterator"],[3,"Body"],[4,"Node"],[3,"Spanned"],[4,"Expr"],[15,"usize"],[4,"Ordering"],[3,"Span"],[15,"i8"],[3,"String"],[4,"Result"],[3,"TypeId"],[13,"Absolute"],[13,"Procedure"],[13,"Offset"],[13,"LoadInt"],[13,"LoadFloat"],[13,"LoadString"],[13,"LoadBool"],[13,"Load"],[13,"LoadFrame"],[13,"Store"],[13,"StoreVar"],[13,"StoreMutVar"],[13,"StoreConstVar"],[13,"AssignVar"],[13,"LoadVar"],[13,"MakeFunc"],[13,"CallFunc"],[13,"Jump"],[13,"JumpIf"],[13,"JumpIfElse"]]},\
"terbium_compiler":{"doc":"","t":[3,6,11,11,11,12,11,11,11,11,12,11,11,11,12,11,11,11,12,11,11,11,11,11],"n":["Compiler","EntrypointFunction","append_to","borrow","borrow_mut","builder","compile","compile_body_entrypoint","compile_node","create_entry_allocator","ctx","eval_expr","fmt","fn_value","fpm","from","into","len","module","optimize","prepare","try_from","try_into","type_id"],"q":["terbium_compiler","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","",""],"i":[0,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],"f":[0,0,[1],[[]],[[]],0,[[2,3,4,5,6],[[9,[7,8]]]],[[10,6],[[9,[8]]]],[[10,11],[[9,[8]]]],[[10,8],12],0,[[10,11],[[9,[13,8]]]],[[10,14],15],[10,7],0,[[]],[[]],[[],16],0,[10,[[9,[8]]]],[10],[[],9],[[],9],[[],17]],"p":[[3,"Vec"],[3,"Context"],[3,"Builder"],[3,"PassManager"],[3,"Module"],[3,"Body"],[3,"FunctionValue"],[15,"str"],[4,"Result"],[3,"Compiler"],[3,"Spanned"],[3,"PointerValue"],[4,"BasicValueEnum"],[3,"Formatter"],[6,"Result"],[15,"usize"],[3,"TypeId"]]},\
"terbium_grammar":{"doc":"","t":[2,8,3,16,2,2,2,2,2,3,3,3,2,2,2,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,25,13,4,13,13,13,13,13,13,13,13,13,13,4,13,13,13,3,8,6,13,13,6,6,6,6,6,6,6,13,4,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,13,3,4,3,4,13,13,13,13,13,13,4,13,13,13,13,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,12,12,11,11,11,11,11,11,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,13,4,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"n":["Body","ChumskyParser","ChumskyStream","Error","Expr","Node","Operator","Param","ParseInterface","Source","Span","Spanned","Target","Token","TypeExpr","append_to","append_to","append_to","append_to","ast","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","boxed","chain","clone","clone","clone","clone_into","clone_into","clone_into","collect","context","debug","default","default","delimited_by","deref","deref_mut","end","end","end","eq","eq","eq","error","fetch_tokens","flatten","fmt","fmt","fmt","fmt","foldl","foldr","from","from","from","from","from","from","from","from","from","from","from_iter","from_nested","from_path","from_range","from_str","get_iter","get_iter","get_iter","hash","ignore_then","ignored","into","into","into","into","into_node","into_node_span","labelled","len","len","len","len","map","map","map_err","map_err_with_span","map_span","map_with_span","merge","new","new","node","node_mut","node_span","or","or_else","or_not","padded_by","parse","parse_recovery","parse_recovery_verbose","range","range","recover_with","repeated","repl","rewind","separated_by","single","source","span","span_mut","src","start","start","start","then","then_ignore","then_with","to","to_owned","to_owned","to_owned","to_path","to_string","token","tokenizer","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_map","type_id","type_id","type_id","type_id","unwrapped","validate","0","1","And","Any","Array","Array","Array","Assign","Attr","Attr","Attr","Auto","BinaryExpr","Body","Bool","Call","Cast","CommonParser","Declare","Expr","Expr","Float","Func","Generic","Ident","Ident","Ident","If","Integer","Module","Node","Not","Null","Nullable","Param","ParseInterface","RecursiveParser","Require","Return","SpannedBody","SpannedExpr","SpannedNode","SpannedOperator","SpannedParam","SpannedTarget","SpannedTypeExpr","String","Target","Tuple","TypeExpr","UnaryExpr","Union","While","append_to","append_to","append_to","append_to","append_to","append_to","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_file","from_string","get_body_parser","get_iter","get_iter","get_iter","get_iter","get_iter","get_iter","into","into","into","into","into","into","len","len","len","len","len","len","nested_parser","parse","parse","parse","parse","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","0","1","1","args","body","body","condition","condition","else_body","else_if_bodies","kwargs","lhs","operator","operator","rhs","value","value","0","0","0","0","body","const","mut","name","params","return_last","return_ty","targets","targets","ty","value","value","0","0","0","1","0","0","0","0","0","0","0","0","0","1","1","1","1","1","Char","Custom","End","Error","ErrorKind","Hint","HintAction","Identifier","Insert","Literal","None","Remove","Replace","TargetKind","Token","Unclosed","Unexpected","UnexpectedEnd","action","append_to","append_to","append_to","append_to","append_to","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","custom","eq","eq","eq","eq","eq","expected","expected_input_found","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get_iter","hash","hint","into","into","into","into","into","kind","label","len","len","len","len","len","merge","message","message","no_const_mut","span","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unclosed_delimiter","unexpected_token","with_label","write","0","before","span","start","0","0","0","0","0","Add","And","Arrow","Assign","BitAnd","BitLShift","BitNot","BitOr","BitRShift","BitXor","Brace","Bracket","Bracket","Break","ByteString","Cast","Class","Colon","Comma","Const","Continue","Div","Dot","Else","EndBracket","Eq","Export","Float","For","Func","Ge","Gt","Identifier","If","In","Integer","InterpolatedString","Invalid","Keyword","Keyword","Le","Let","Literal","Literal","Lt","Match","Mod","Mul","Mut","Ne","Not","Operator","Operator","Or","Paren","Pow","Private","Question","Range","RawString","Require","Return","Semicolon","StartBracket","String","String","StringLiteral","Sub","Throws","Token","Where","While","With","append_to","append_to","append_to","append_to","append_to","append_to","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","get_iter","get_iter","get_iter","get_iter","get_iter","get_iter","get_lexer","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","is_soft","len","len","len","len","len","len","supports_binary","supports_unary","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0","0","0","0","0","0","0","0","0"],"q":["terbium_grammar","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","terbium_grammar::ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","terbium_grammar::ast::Expr","","","","","","","","","","","","","","","","","","","","","","","","terbium_grammar::ast::Node","","","","","","","","","","","","","","","","terbium_grammar::ast::Target","","","","terbium_grammar::ast::TypeExpr","","","","","","","","","","","","","","terbium_grammar::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","terbium_grammar::error::ErrorKind","","","","terbium_grammar::error::HintAction","","","terbium_grammar::error::TargetKind","","terbium_grammar::tokenterbium_grammar::token::Literal","","","terbium_grammar::token::StringLiteral","","","","terbium_grammar::token::Token","","","","","",""],"d":["","A trait implemented by parsers.","A type that represents a stream of input tokens. Unlike …","The type of errors emitted by this parser.","","","","","","","","","","","","","","","","","","","","","","","","","Box the parser, yielding a parser that performs parsing …","Parse one thing and then another thing, attempting to …","","","","","","","Collect the output of this parser into a type implementing …","","Include this parser in the debugging output produced by …","","","Parse the pattern surrounded by the given delimiters.","","","","","","","","","","Eagerly evaluate the token stream, returning an iterator …","Flatten a nested collection.","","","","","Left-fold the output of the parser into a single value.","Right-fold the output of the parser into a single value.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Please note that Chumsky currently uses character indices …","Please note that Chumsky currently uses character indices …","","","Returns the argument unchanged.","","","Create a new stream from an iterator of <code>(Token, Span)</code> …","Create a new <code>Stream</code> from an iterator of nested tokens and …","","","Attempt to convert the output of this parser into …","","","","","Parse one thing and then another thing, yielding only the …","Ignore the output of this parser, yielding <code>()</code> as an output …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Label the pattern parsed by this parser for more useful …","","","","","","Map the output of this parser to another value.","Map the primary error of this parser to another value.","Map the primary error of this parser to another value, …","","Map the output of this parser to another value, making use …","Merge the span with other span.","","","","","","Parse one thing or, on failure, another thing.","Map the primary error of this parser to a result. If the …","Attempt to parse something, but only if it exists.","Parse a pattern, but with an instance of another pattern …","Parse a stream of tokens, yielding an output <em>or</em> any errors …","Parse a stream of tokens, yielding an output if possible, …","Parse a stream of tokens, yielding an output if possible, …","","","Apply a fallback recovery strategy to this parser should …","Parse a pattern any number of times (including zero times).","","Parse a pattern. Afterwards, the input stream will be …","Parse a pattern, separated by another, any number of times.","","","","","","","","","Parse one thing and then another thing, yielding a tuple …","Parse one thing and then another thing, yielding only the …","Parse one thing and then another thing, creating the …","Transform all outputs of this parser to a pretermined …","","","","","","","","","","","","","","","","After a successful parse, apply a fallible function to the …","","","","","For parsers that produce a <code>Result</code> as their output, unwrap …","Validate an output, producing non-terminal errors if it …","","","Given A &amp; B, this becomes And(Ident(A), Ident(B))","The <code>any</code> type. It is compatible with any other type and any …","","Given T[], this becomes Array(Ident(T), None). Given T[n], …","","","","Given mod.Type, this becomes Attr(Ident(mod), “type”)","","The <code>auto</code> type, which is the default type and means that …","","","","","","","","","","","","Given Type&lt;A, B&gt;, this becomes Generic(Ident(Type), […","","Given T, this becomes Ident(“T”)","","","","","","Given !T, this becomes Not(Ident(T))","The constant null type. Only <code>null</code> will be compatible with …","Given ?T, this becomes Nullable(Ident(T)) Equivalent to T …","","","","","","","","","","","","","","","Given [A, B], this becomes Tuple([Ident(A), Ident(B)]).","","","Given A | B, this becomes Union(Ident(A), Ident(B))","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Reads and tokenizes the specified source file.","Tokenizes source code and parses it using this parser.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","Errors","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Write the error to the specified writer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,74,0,0,0,0,0,0,0,0,0,0,0,5,6,8,14,0,5,6,8,14,5,6,8,14,74,74,5,6,8,5,6,8,74,6,74,5,6,74,8,8,6,6,6,5,6,8,0,14,74,5,5,6,8,74,74,5,6,8,14,14,14,14,14,14,14,14,14,5,6,74,5,6,8,5,74,74,5,6,8,14,8,8,74,5,6,8,14,8,74,74,74,8,74,6,6,8,8,8,8,74,74,74,74,74,74,74,6,6,74,74,5,74,74,6,6,8,8,6,6,6,6,74,74,74,74,5,6,8,5,5,0,0,5,6,8,14,5,6,8,14,74,5,6,8,14,74,74,51,51,47,47,46,47,48,50,46,47,48,47,46,0,46,46,46,0,50,0,50,46,50,47,46,47,48,46,46,50,0,47,47,47,0,0,0,50,50,0,0,0,0,0,0,0,46,0,47,0,46,47,46,46,47,48,49,50,51,46,47,48,49,50,51,46,47,48,49,50,51,46,47,48,49,50,51,46,47,48,49,50,51,46,47,48,49,50,51,46,47,48,49,50,51,46,47,48,49,50,51,75,75,0,46,47,48,49,50,51,46,47,48,49,50,51,46,47,48,49,50,51,0,75,46,50,51,46,47,48,49,50,51,46,47,48,49,50,51,46,47,48,49,50,51,46,47,48,49,50,51,76,77,78,79,80,81,82,83,82,83,84,85,86,85,86,85,85,84,87,88,87,87,88,84,89,90,91,92,93,94,94,93,93,93,93,94,95,94,94,95,96,97,98,98,99,100,101,102,103,104,105,106,107,100,101,102,103,106,62,63,62,0,0,0,0,62,60,62,60,60,60,0,62,63,63,63,64,62,63,60,64,54,62,63,60,64,54,62,63,60,64,54,60,60,54,62,63,60,64,54,54,54,62,62,63,60,64,54,62,62,62,63,60,64,54,60,62,54,62,63,60,64,54,54,54,62,63,60,64,54,54,64,54,54,54,60,62,62,63,60,64,54,62,63,60,64,54,62,63,60,64,54,54,54,54,54,108,109,109,109,110,111,112,113,114,70,70,68,68,70,70,70,70,70,70,58,0,58,73,71,68,73,68,68,73,73,70,68,73,68,70,73,72,73,73,70,70,68,73,73,72,71,68,0,68,70,73,0,68,70,73,70,70,73,70,70,0,68,70,58,70,73,68,70,71,73,73,68,68,71,72,0,70,73,0,73,73,73,70,71,72,73,58,68,70,71,72,73,58,68,70,71,72,73,58,68,70,71,72,73,58,68,70,71,72,73,58,68,70,71,72,73,58,68,70,70,71,71,72,72,73,73,58,68,68,70,71,72,73,58,68,70,71,72,73,58,68,0,70,71,72,73,58,68,70,71,72,73,58,68,73,70,71,72,73,58,68,70,70,70,71,72,73,58,68,70,71,72,73,68,70,71,72,73,58,68,70,71,72,73,58,68,70,71,72,73,58,68,115,116,117,118,119,120,121,122,123,124,125,126,127,128],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],[[4,[3]]]],[5,5],[6,6],[[[8,[7]]],[[8,[7]]]],[[]],[[]],[[]],[[],4],[6],[[],9],[[],5],[[],6],[[],10],[8],[8],[6,11],[6],[6,11],[[5,5],12],[[6,6],12],[[[8,[13]],[8,[13]]],12],0,[14,15],[[],4],[[5,16],17],[[5,16],17],[[6,16],17],[[[8,[18]],16],17],[[],19],[[],20],[[]],[[]],[[]],[21,[[14,[22,[23,[11]],[25,[15,24]]]]]],[26,[[14,[22,[23,[11]],[25,[15,24]]]]]],[[],[[14,[[23,[11]],[25,[15,24]]]]]],[[],[[14,[[23,[11]],[25,[15,24]]]]]],[[]],[[[1,[24]]],[[14,[[23,[11]],[25,[15,24]]]]]],[[],[[14,[[23,[11]],[25,[15,24]]]]]],[[],14],[[],[[14,[[25,[15,24]]]]]],[[],5],[[5,[23,[11]]],6],[[],4],[[]],[[]],[[]],[5],[[],[[4,[3]]]],[[],27],[[]],[[]],[[]],[[]],[8],[8],[[],28],[[],11],[[],11],[[],11],[[],11],[8,8],[[],4],[[],29],[[],30],[[8,31],8],[[],32],[[6,6],6],[[[23,[11]]],6],[6,8],[8],[8],[8],[[],33],[[],34],[[],35],[[],[[4,[[3,[[4,[3]]]]]]]],[[],[[36,[[1,[24]]]]]],[[]],[[]],[6,[[23,[11]]]],0,[[],37],[[],38],[[],5],[[],39],[[],40],[[5,11],6],[6],[8,6],[8,6],[6,5],[6,11],[6,11],[6],[[],3],[[],[[4,[3]]]],[[],41],[[],27],[[]],[[]],[[]],[5,42],[[],26],0,0,[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],43],[[],44],[[],44],[[],44],[[],44],[[],[[4,[36]]]],[[],45],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[46,46],[47,47],[48,48],[49,49],[50,50],[51,51],[[]],[[]],[[]],[[]],[[]],[[]],[[46,46],12],[[47,47],12],[[48,48],12],[[49,49],12],[[50,50],12],[[51,51],12],[[46,16],17],[[47,16],17],[[48,16],17],[[49,16],17],[[50,16],17],[[51,16],17],[[]],[[]],[[]],[[]],[[]],[[]],[[[53,[52]]],[[36,[[1,[54]]]]]],[[5,26],[[36,[[1,[54]]]]]],[[],[[56,[55]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[57,58,[0,[59,7]]],57],[1,[[36,[[1,[54]]]]]],[1,[[36,[46,[1,[54]]]]]],[1,[[36,[50,[1,[54]]]]]],[1,[[36,[51,[1,[54]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[60,60],[[]],[[6,61],54],[[62,62],12],[[63,63],12],[[60,60],12],[[64,64],12],[[54,54],12],0,[[65,[67,[[0,[[66,[62]],7]]]]],54],[[62,16],17],[[62,16],17],[[63,16],17],[[60,16],17],[[64,16],17],[[54,16],17],[68,62],[22,62],[[]],[[]],[[]],[[]],[[]],[[]],[62],0,[[]],[[]],[[]],[[]],[[]],0,0,[[],11],[[],11],[[],11],[[],11],[[],11],[[54,54],54],0,0,[6,54],0,[[]],[[],26],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],44],[[],44],[[],44],[[],44],[[],44],[[[0,[[66,[62]],7]],[0,[[66,[62]],7]],[67,[[0,[[66,[62]],7]]]]],54],[[6,68],54],[54,54],[[54,69]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[70,70],[71,71],[72,72],[73,73],[58,58],[68,68],[[]],[[]],[[]],[[]],[[]],[[]],[[70,70],12],[[71,71],12],[[72,72],12],[[73,73],12],[[58,58],12],[[68,68],12],[[70,16],17],[[70,16],17],[[71,16],17],[[71,16],17],[[72,16],17],[[72,16],17],[[73,16],17],[[73,16],17],[[58,16],17],[[68,16],17],[[68,16],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[74,[22,1]]]],[70],[71],[72],[73],[58],[68],[[]],[[]],[[]],[[]],[[]],[[]],[73,12],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[70,12],[70,12],[[]],[[]],[[]],[[]],[[]],[[]],[[],26],[[],26],[[],26],[[],26],[[],26],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],36],[[],44],[[],44],[[],44],[[],44],[[],44],[[],44],0,0,0,0,0,0,0,0,0,0,0,0,0,0],"p":[[3,"Vec"],[3,"BoxedParser"],[3,"Then"],[3,"Map"],[3,"Source"],[3,"Span"],[8,"Clone"],[3,"Spanned"],[3,"Debug"],[3,"DelimitedBy"],[15,"usize"],[15,"bool"],[8,"PartialEq"],[3,"ChumskyStream"],[8,"Iterator"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[3,"Foldl"],[3,"Foldr"],[15,"str"],[15,"char"],[3,"Range"],[3,"Global"],[3,"Box"],[3,"String"],[3,"To"],[3,"Label"],[3,"MapErr"],[3,"MapErrWithSpan"],[8,"FnOnce"],[3,"MapWithSpan"],[3,"Or"],[3,"OrElse"],[3,"OrNot"],[4,"Result"],[3,"Recovery"],[3,"Repeated"],[3,"Rewind"],[3,"SeparatedBy"],[3,"ThenWith"],[3,"PathBuf"],[3,"TryMap"],[3,"TypeId"],[3,"Validate"],[4,"Expr"],[4,"TypeExpr"],[4,"Target"],[3,"Param"],[4,"Node"],[3,"Body"],[3,"Path"],[8,"AsRef"],[3,"Error"],[6,"SpannedBody"],[6,"RecursiveParser"],[25,"CommonParser"],[4,"Bracket"],[8,"Fn"],[4,"HintAction"],[8,"Display"],[4,"TargetKind"],[4,"ErrorKind"],[3,"Hint"],[8,"IntoIterator"],[8,"Into"],[4,"Option"],[4,"Token"],[8,"Write"],[4,"Operator"],[4,"StringLiteral"],[4,"Literal"],[4,"Keyword"],[8,"ChumskyParser"],[8,"ParseInterface"],[13,"Integer"],[13,"Float"],[13,"String"],[13,"Bool"],[13,"Ident"],[13,"Array"],[13,"Cast"],[13,"Attr"],[13,"Call"],[13,"If"],[13,"While"],[13,"BinaryExpr"],[13,"UnaryExpr"],[13,"Module"],[13,"Expr"],[13,"Return"],[13,"Require"],[13,"Func"],[13,"Declare"],[13,"Assign"],[13,"Ident"],[13,"Array"],[13,"Attr"],[13,"Ident"],[13,"Attr"],[13,"Generic"],[13,"Union"],[13,"And"],[13,"Nullable"],[13,"Not"],[13,"Array"],[13,"Tuple"],[13,"Unexpected"],[13,"Unclosed"],[13,"Replace"],[13,"Insert"],[13,"Remove"],[13,"Char"],[13,"Token"],[13,"String"],[13,"Integer"],[13,"Float"],[13,"String"],[13,"ByteString"],[13,"RawString"],[13,"InterpolatedString"],[13,"Invalid"],[13,"Operator"],[13,"Literal"],[13,"Keyword"],[13,"Identifier"],[13,"StartBracket"],[13,"EndBracket"]]},\
"terbium_interpreter":{"doc":"The interpreter for Terbium.","t":[13,3,6,13,13,3,3,13,6,3,3,3,3,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12],"n":["Bool","Context","DefaultInterpreter","Float","Integer","Interner","Interpreter","Null","ObjectRef","ObjectStore","Scope","ScopeEntry","Stack","String","TerbiumObject","append_to","append_to","append_to","append_to","append_to","append_to","append_to","append_to","assign_var","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","ctx","decr_ptr","default","default","default","default","default","enter_scope","eq","exit_scope","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","get_bool_object","get_iter","get_object_repr","incr_ptr","intern","into","into","into","into","into","into","into","into","is_const","is_mut","is_truthy","len","len","len","len","len","len","len","len","load_bool","load_int","loc","locals","locals","locals_mut","lookup","lookup_var","lookup_var_mut","new","new","new","new","new","next_free","next_free_mut","pop","pop","pop_cloned","pop_cloned","pop_detailed","pop_or_null","pop_ref","push","push","resolve","resolve_or_null","run_bytecode","stack","stack_is_empty","store","store","store_auto","store_var","string_lookup","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_capacity","0","0","0","0"],"q":["terbium_interpreter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","terbium_interpreter::TerbiumObject","","",""],"d":["","Represents an interpreter’s context during runtime.","","","","","","","The integer type of the location of a <code>TerbiumObject</code>.","A wrapper around a <code>HashMap</code> that maps object locations to …","Represents a scope of identifiers.","Represents an entry in a scope.","Represents stack wrapper around an array.","","The internal Terbium object model. These are created …","","","","","","","","","Reassigns the value at the given location to the given <code>key</code>.","","","","","","","","","","","","","","","","","","","","Decrements <code>ptr</code> by 1.","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Increments <code>ptr</code> by 1.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Whether or not this entry is a constant.","Whether or not this entry is mutable.","","","","","","","","","","Loads the given bool and returns its location.","Loads the given integer and returns its location.","","Returns a reference to the current local scope.","","Returns a mutable reference to the current local scope.","","","","","","","","","Retrieves a reference to the next free slot.","Retrieves a mutable reference to the free slot.","Pops the previous object in the stack and moves the …","Pops the last object from the stack and returns a …","Gets a cloned version of the previous object in the stack, …","Pops the last object from the stack, clones it, and …","Pops the last object from the stack and returns a tuple …","Pops the last object from the stack and returns a …","Pops the last object from the stack and returns its …","Pushes the given object to the stack.","Pushes an object by location to the stack.","Resolves an object pointer into a reference of the object …","Resolves an object pointer into a reference of the object …","Integers with a mantissa exceeding a width of 52 bits will …","","Return <code>true</code> if the stack is empty","Stores the object at the given location.","","Stores the object at a pre-determined location.","Stores the <code>ScopeEntry</code> in the given <code>key</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[5,0,0,5,5,0,0,5,0,0,0,0,0,5,0,11,5,6,7,14,8,2,9,2,11,5,6,7,14,8,2,9,11,5,6,7,14,8,2,9,5,5,9,6,6,7,8,2,9,2,5,2,11,5,6,7,14,8,2,9,4,11,5,6,7,14,8,2,9,9,5,9,6,11,11,5,6,7,14,8,2,9,14,14,9,11,5,6,7,14,8,2,9,2,2,14,2,8,2,11,2,2,6,7,8,2,9,6,6,6,2,6,2,2,2,2,6,2,7,7,9,9,2,2,2,2,2,9,5,11,5,6,7,14,8,2,9,11,5,6,7,14,8,2,9,11,5,6,7,14,8,2,9,11,22,23,24,25],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1],[1],[1],[1],[1],[1],[1],[1],[[2,3,4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,5],[[]],0,[6],[[],6],[[],7],[[],8],[[],2],[[],9],[2],[[5,5],10],[2],[[11,12],13],[[5,12],13],[[6,12],13],[[7,12],13],[[14,12],13],[[8,12],13],[[2,12],13],[[9,12],13],[14,4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[9,5],4],[[]],[[9,5],15],[6],[[11,16],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[14,10],[14,10],[[9,5],10],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[],3],[[2,10],4],[[2,17],4],0,[2,8],0,[2,8],[[11,3],16],[[2,3],[[18,[14]]]],[[2,3],[[18,[14]]]],[[],6],[[],7],[[],8],[[],2],[[],9],[6,4],[6,4],[6,4],[2,5],[6,4],[2,5],[2],[2,5],[2,4],[[6,4]],[[2,4]],[[7,4],5],[[7,4],5],[[9,19]],[9,6],[2,10],[[2,4,5],4],0,[[2,5],4],[[2,3,14]],[[9,3],16],[[]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[3,11],0,0,0,0],"p":[[3,"Vec"],[3,"Context"],[15,"usize"],[6,"ObjectRef"],[4,"TerbiumObject"],[3,"Stack"],[3,"ObjectStore"],[3,"Scope"],[3,"Interpreter"],[15,"bool"],[3,"Interner"],[3,"Formatter"],[6,"Result"],[3,"ScopeEntry"],[3,"String"],[15,"str"],[15,"i128"],[4,"Option"],[3,"Program"],[4,"Result"],[3,"TypeId"],[13,"Integer"],[13,"Float"],[13,"String"],[13,"Bool"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
